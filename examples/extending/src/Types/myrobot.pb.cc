// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: myrobot.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "myrobot.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace myrobot {

namespace {

const ::google::protobuf::Descriptor* NewControlMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewControlMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewTelemetryMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewTelemetryMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_myrobot_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_myrobot_2eproto() {
  protobuf_AddDesc_myrobot_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "myrobot.proto");
  GOOGLE_CHECK(file != NULL);
  NewControlMessage_descriptor_ = file->message_type(0);
  static const int NewControlMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewControlMessage, sequence_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewControlMessage, msg_),
  };
  NewControlMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NewControlMessage_descriptor_,
      NewControlMessage::default_instance_,
      NewControlMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(NewControlMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewControlMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewControlMessage, _is_default_instance_));
  NewTelemetryMessage_descriptor_ = file->message_type(1);
  static const int NewTelemetryMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewTelemetryMessage, sequence_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewTelemetryMessage, msg_),
  };
  NewTelemetryMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NewTelemetryMessage_descriptor_,
      NewTelemetryMessage::default_instance_,
      NewTelemetryMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(NewTelemetryMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewTelemetryMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewTelemetryMessage, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_myrobot_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NewControlMessage_descriptor_, &NewControlMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NewTelemetryMessage_descriptor_, &NewTelemetryMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_myrobot_2eproto() {
  delete NewControlMessage::default_instance_;
  delete NewControlMessage_reflection_;
  delete NewTelemetryMessage::default_instance_;
  delete NewTelemetryMessage_reflection_;
}

void protobuf_AddDesc_myrobot_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_myrobot_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmyrobot.proto\022\007myrobot\"5\n\021NewControlMe"
    "ssage\022\023\n\013sequence_no\030\001 \001(\005\022\013\n\003msg\030\002 \001(\t\""
    "7\n\023NewTelemetryMessage\022\023\n\013sequence_no\030\001 "
    "\001(\005\022\013\n\003msg\030\002 \001(\tb\006proto3", 144);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "myrobot.proto", &protobuf_RegisterTypes);
  NewControlMessage::default_instance_ = new NewControlMessage();
  NewTelemetryMessage::default_instance_ = new NewTelemetryMessage();
  NewControlMessage::default_instance_->InitAsDefaultInstance();
  NewTelemetryMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_myrobot_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_myrobot_2eproto {
  StaticDescriptorInitializer_myrobot_2eproto() {
    protobuf_AddDesc_myrobot_2eproto();
  }
} static_descriptor_initializer_myrobot_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewControlMessage::kSequenceNoFieldNumber;
const int NewControlMessage::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewControlMessage::NewControlMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:myrobot.NewControlMessage)
}

void NewControlMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NewControlMessage::NewControlMessage(const NewControlMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:myrobot.NewControlMessage)
}

void NewControlMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sequence_no_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NewControlMessage::~NewControlMessage() {
  // @@protoc_insertion_point(destructor:myrobot.NewControlMessage)
  SharedDtor();
}

void NewControlMessage::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NewControlMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewControlMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewControlMessage_descriptor_;
}

const NewControlMessage& NewControlMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_myrobot_2eproto();
  return *default_instance_;
}

NewControlMessage* NewControlMessage::default_instance_ = NULL;

NewControlMessage* NewControlMessage::New(::google::protobuf::Arena* arena) const {
  NewControlMessage* n = new NewControlMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewControlMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:myrobot.NewControlMessage)
  sequence_no_ = 0;
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool NewControlMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:myrobot.NewControlMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sequence_no = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_no_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "myrobot.NewControlMessage.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:myrobot.NewControlMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:myrobot.NewControlMessage)
  return false;
#undef DO_
}

void NewControlMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:myrobot.NewControlMessage)
  // optional int32 sequence_no = 1;
  if (this->sequence_no() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_no(), output);
  }

  // optional string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "myrobot.NewControlMessage.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:myrobot.NewControlMessage)
}

::google::protobuf::uint8* NewControlMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:myrobot.NewControlMessage)
  // optional int32 sequence_no = 1;
  if (this->sequence_no() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_no(), target);
  }

  // optional string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "myrobot.NewControlMessage.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:myrobot.NewControlMessage)
  return target;
}

int NewControlMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:myrobot.NewControlMessage)
  int total_size = 0;

  // optional int32 sequence_no = 1;
  if (this->sequence_no() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence_no());
  }

  // optional string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewControlMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:myrobot.NewControlMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NewControlMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NewControlMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:myrobot.NewControlMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:myrobot.NewControlMessage)
    MergeFrom(*source);
  }
}

void NewControlMessage::MergeFrom(const NewControlMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myrobot.NewControlMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.sequence_no() != 0) {
    set_sequence_no(from.sequence_no());
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void NewControlMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:myrobot.NewControlMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewControlMessage::CopyFrom(const NewControlMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myrobot.NewControlMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewControlMessage::IsInitialized() const {

  return true;
}

void NewControlMessage::Swap(NewControlMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewControlMessage::InternalSwap(NewControlMessage* other) {
  std::swap(sequence_no_, other->sequence_no_);
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewControlMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewControlMessage_descriptor_;
  metadata.reflection = NewControlMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewControlMessage

// optional int32 sequence_no = 1;
void NewControlMessage::clear_sequence_no() {
  sequence_no_ = 0;
}
 ::google::protobuf::int32 NewControlMessage::sequence_no() const {
  // @@protoc_insertion_point(field_get:myrobot.NewControlMessage.sequence_no)
  return sequence_no_;
}
 void NewControlMessage::set_sequence_no(::google::protobuf::int32 value) {
  
  sequence_no_ = value;
  // @@protoc_insertion_point(field_set:myrobot.NewControlMessage.sequence_no)
}

// optional string msg = 2;
void NewControlMessage::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NewControlMessage::msg() const {
  // @@protoc_insertion_point(field_get:myrobot.NewControlMessage.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewControlMessage::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:myrobot.NewControlMessage.msg)
}
 void NewControlMessage::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:myrobot.NewControlMessage.msg)
}
 void NewControlMessage::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:myrobot.NewControlMessage.msg)
}
 ::std::string* NewControlMessage::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:myrobot.NewControlMessage.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NewControlMessage::release_msg() {
  // @@protoc_insertion_point(field_release:myrobot.NewControlMessage.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewControlMessage::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:myrobot.NewControlMessage.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewTelemetryMessage::kSequenceNoFieldNumber;
const int NewTelemetryMessage::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewTelemetryMessage::NewTelemetryMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:myrobot.NewTelemetryMessage)
}

void NewTelemetryMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NewTelemetryMessage::NewTelemetryMessage(const NewTelemetryMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:myrobot.NewTelemetryMessage)
}

void NewTelemetryMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sequence_no_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NewTelemetryMessage::~NewTelemetryMessage() {
  // @@protoc_insertion_point(destructor:myrobot.NewTelemetryMessage)
  SharedDtor();
}

void NewTelemetryMessage::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NewTelemetryMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewTelemetryMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewTelemetryMessage_descriptor_;
}

const NewTelemetryMessage& NewTelemetryMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_myrobot_2eproto();
  return *default_instance_;
}

NewTelemetryMessage* NewTelemetryMessage::default_instance_ = NULL;

NewTelemetryMessage* NewTelemetryMessage::New(::google::protobuf::Arena* arena) const {
  NewTelemetryMessage* n = new NewTelemetryMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewTelemetryMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:myrobot.NewTelemetryMessage)
  sequence_no_ = 0;
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool NewTelemetryMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:myrobot.NewTelemetryMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sequence_no = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_no_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "myrobot.NewTelemetryMessage.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:myrobot.NewTelemetryMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:myrobot.NewTelemetryMessage)
  return false;
#undef DO_
}

void NewTelemetryMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:myrobot.NewTelemetryMessage)
  // optional int32 sequence_no = 1;
  if (this->sequence_no() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_no(), output);
  }

  // optional string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "myrobot.NewTelemetryMessage.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:myrobot.NewTelemetryMessage)
}

::google::protobuf::uint8* NewTelemetryMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:myrobot.NewTelemetryMessage)
  // optional int32 sequence_no = 1;
  if (this->sequence_no() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_no(), target);
  }

  // optional string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "myrobot.NewTelemetryMessage.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:myrobot.NewTelemetryMessage)
  return target;
}

int NewTelemetryMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:myrobot.NewTelemetryMessage)
  int total_size = 0;

  // optional int32 sequence_no = 1;
  if (this->sequence_no() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence_no());
  }

  // optional string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewTelemetryMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:myrobot.NewTelemetryMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NewTelemetryMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NewTelemetryMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:myrobot.NewTelemetryMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:myrobot.NewTelemetryMessage)
    MergeFrom(*source);
  }
}

void NewTelemetryMessage::MergeFrom(const NewTelemetryMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myrobot.NewTelemetryMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.sequence_no() != 0) {
    set_sequence_no(from.sequence_no());
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void NewTelemetryMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:myrobot.NewTelemetryMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewTelemetryMessage::CopyFrom(const NewTelemetryMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myrobot.NewTelemetryMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewTelemetryMessage::IsInitialized() const {

  return true;
}

void NewTelemetryMessage::Swap(NewTelemetryMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewTelemetryMessage::InternalSwap(NewTelemetryMessage* other) {
  std::swap(sequence_no_, other->sequence_no_);
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewTelemetryMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewTelemetryMessage_descriptor_;
  metadata.reflection = NewTelemetryMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewTelemetryMessage

// optional int32 sequence_no = 1;
void NewTelemetryMessage::clear_sequence_no() {
  sequence_no_ = 0;
}
 ::google::protobuf::int32 NewTelemetryMessage::sequence_no() const {
  // @@protoc_insertion_point(field_get:myrobot.NewTelemetryMessage.sequence_no)
  return sequence_no_;
}
 void NewTelemetryMessage::set_sequence_no(::google::protobuf::int32 value) {
  
  sequence_no_ = value;
  // @@protoc_insertion_point(field_set:myrobot.NewTelemetryMessage.sequence_no)
}

// optional string msg = 2;
void NewTelemetryMessage::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NewTelemetryMessage::msg() const {
  // @@protoc_insertion_point(field_get:myrobot.NewTelemetryMessage.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewTelemetryMessage::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:myrobot.NewTelemetryMessage.msg)
}
 void NewTelemetryMessage::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:myrobot.NewTelemetryMessage.msg)
}
 void NewTelemetryMessage::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:myrobot.NewTelemetryMessage.msg)
}
 ::std::string* NewTelemetryMessage::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:myrobot.NewTelemetryMessage.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NewTelemetryMessage::release_msg() {
  // @@protoc_insertion_point(field_release:myrobot.NewTelemetryMessage.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewTelemetryMessage::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:myrobot.NewTelemetryMessage.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace myrobot

// @@protoc_insertion_point(global_scope)
