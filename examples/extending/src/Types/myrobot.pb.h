// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: myrobot.proto

#ifndef PROTOBUF_myrobot_2eproto__INCLUDED
#define PROTOBUF_myrobot_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace myrobot {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_myrobot_2eproto();
void protobuf_AssignDesc_myrobot_2eproto();
void protobuf_ShutdownFile_myrobot_2eproto();

class NewControlMessage;
class NewTelemetryMessage;

// ===================================================================

class NewControlMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:myrobot.NewControlMessage) */ {
 public:
  NewControlMessage();
  virtual ~NewControlMessage();

  NewControlMessage(const NewControlMessage& from);

  inline NewControlMessage& operator=(const NewControlMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewControlMessage& default_instance();

  void Swap(NewControlMessage* other);

  // implements Message ----------------------------------------------

  inline NewControlMessage* New() const { return New(NULL); }

  NewControlMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewControlMessage& from);
  void MergeFrom(const NewControlMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NewControlMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sequence_no = 1;
  void clear_sequence_no();
  static const int kSequenceNoFieldNumber = 1;
  ::google::protobuf::int32 sequence_no() const;
  void set_sequence_no(::google::protobuf::int32 value);

  // optional string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:myrobot.NewControlMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 sequence_no_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_myrobot_2eproto();
  friend void protobuf_AssignDesc_myrobot_2eproto();
  friend void protobuf_ShutdownFile_myrobot_2eproto();

  void InitAsDefaultInstance();
  static NewControlMessage* default_instance_;
};
// -------------------------------------------------------------------

class NewTelemetryMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:myrobot.NewTelemetryMessage) */ {
 public:
  NewTelemetryMessage();
  virtual ~NewTelemetryMessage();

  NewTelemetryMessage(const NewTelemetryMessage& from);

  inline NewTelemetryMessage& operator=(const NewTelemetryMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewTelemetryMessage& default_instance();

  void Swap(NewTelemetryMessage* other);

  // implements Message ----------------------------------------------

  inline NewTelemetryMessage* New() const { return New(NULL); }

  NewTelemetryMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewTelemetryMessage& from);
  void MergeFrom(const NewTelemetryMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NewTelemetryMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sequence_no = 1;
  void clear_sequence_no();
  static const int kSequenceNoFieldNumber = 1;
  ::google::protobuf::int32 sequence_no() const;
  void set_sequence_no(::google::protobuf::int32 value);

  // optional string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:myrobot.NewTelemetryMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 sequence_no_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_myrobot_2eproto();
  friend void protobuf_AssignDesc_myrobot_2eproto();
  friend void protobuf_ShutdownFile_myrobot_2eproto();

  void InitAsDefaultInstance();
  static NewTelemetryMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// NewControlMessage

// optional int32 sequence_no = 1;
inline void NewControlMessage::clear_sequence_no() {
  sequence_no_ = 0;
}
inline ::google::protobuf::int32 NewControlMessage::sequence_no() const {
  // @@protoc_insertion_point(field_get:myrobot.NewControlMessage.sequence_no)
  return sequence_no_;
}
inline void NewControlMessage::set_sequence_no(::google::protobuf::int32 value) {
  
  sequence_no_ = value;
  // @@protoc_insertion_point(field_set:myrobot.NewControlMessage.sequence_no)
}

// optional string msg = 2;
inline void NewControlMessage::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NewControlMessage::msg() const {
  // @@protoc_insertion_point(field_get:myrobot.NewControlMessage.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewControlMessage::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:myrobot.NewControlMessage.msg)
}
inline void NewControlMessage::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:myrobot.NewControlMessage.msg)
}
inline void NewControlMessage::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:myrobot.NewControlMessage.msg)
}
inline ::std::string* NewControlMessage::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:myrobot.NewControlMessage.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewControlMessage::release_msg() {
  // @@protoc_insertion_point(field_release:myrobot.NewControlMessage.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewControlMessage::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:myrobot.NewControlMessage.msg)
}

// -------------------------------------------------------------------

// NewTelemetryMessage

// optional int32 sequence_no = 1;
inline void NewTelemetryMessage::clear_sequence_no() {
  sequence_no_ = 0;
}
inline ::google::protobuf::int32 NewTelemetryMessage::sequence_no() const {
  // @@protoc_insertion_point(field_get:myrobot.NewTelemetryMessage.sequence_no)
  return sequence_no_;
}
inline void NewTelemetryMessage::set_sequence_no(::google::protobuf::int32 value) {
  
  sequence_no_ = value;
  // @@protoc_insertion_point(field_set:myrobot.NewTelemetryMessage.sequence_no)
}

// optional string msg = 2;
inline void NewTelemetryMessage::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NewTelemetryMessage::msg() const {
  // @@protoc_insertion_point(field_get:myrobot.NewTelemetryMessage.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewTelemetryMessage::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:myrobot.NewTelemetryMessage.msg)
}
inline void NewTelemetryMessage::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:myrobot.NewTelemetryMessage.msg)
}
inline void NewTelemetryMessage::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:myrobot.NewTelemetryMessage.msg)
}
inline ::std::string* NewTelemetryMessage::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:myrobot.NewTelemetryMessage.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewTelemetryMessage::release_msg() {
  // @@protoc_insertion_point(field_release:myrobot.NewTelemetryMessage.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewTelemetryMessage::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:myrobot.NewTelemetryMessage.msg)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace myrobot

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_myrobot_2eproto__INCLUDED
