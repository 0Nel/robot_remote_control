// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RobotRemoteControl.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RobotRemoteControl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace robot_remote_control {

namespace {

const ::google::protobuf::Descriptor* Vector2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector2_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3_reflection_ = NULL;
const ::google::protobuf::Descriptor* Position_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Position_reflection_ = NULL;
const ::google::protobuf::Descriptor* Orientation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Orientation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pose_reflection_ = NULL;
const ::google::protobuf::Descriptor* Poses_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Poses_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transform_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transform_reflection_ = NULL;
const ::google::protobuf::Descriptor* Twist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Twist_reflection_ = NULL;
const ::google::protobuf::Descriptor* JointState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JointState_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoTo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoTo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimpleActionDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleActionDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimpleAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimpleActions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleActions_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComplexAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComplexAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComplexActions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComplexActions_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobotName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotName_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobotState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotState_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoStream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoStream_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoStreams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoStreams_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimpleSensor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleSensor_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimpleSensors_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleSensors_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SimpleActionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ComplexActionType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_RobotRemoteControl_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_RobotRemoteControl_2eproto() {
  protobuf_AddDesc_RobotRemoteControl_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RobotRemoteControl.proto");
  GOOGLE_CHECK(file != NULL);
  Vector2_descriptor_ = file->message_type(0);
  static const int Vector2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2, y_),
  };
  Vector2_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector2_descriptor_,
      Vector2::default_instance_,
      Vector2_offsets_,
      -1,
      -1,
      -1,
      sizeof(Vector2),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2, _is_default_instance_));
  Vector3_descriptor_ = file->message_type(1);
  static const int Vector3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, z_),
  };
  Vector3_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector3_descriptor_,
      Vector3::default_instance_,
      Vector3_offsets_,
      -1,
      -1,
      -1,
      sizeof(Vector3),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _is_default_instance_));
  Position_descriptor_ = file->message_type(2);
  static const int Position_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, z_),
  };
  Position_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Position_descriptor_,
      Position::default_instance_,
      Position_offsets_,
      -1,
      -1,
      -1,
      sizeof(Position),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _is_default_instance_));
  Orientation_descriptor_ = file->message_type(3);
  static const int Orientation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation, w_),
  };
  Orientation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Orientation_descriptor_,
      Orientation::default_instance_,
      Orientation_offsets_,
      -1,
      -1,
      -1,
      sizeof(Orientation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation, _is_default_instance_));
  Pose_descriptor_ = file->message_type(4);
  static const int Pose_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, orientation_),
  };
  Pose_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Pose_descriptor_,
      Pose::default_instance_,
      Pose_offsets_,
      -1,
      -1,
      -1,
      sizeof(Pose),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, _is_default_instance_));
  Poses_descriptor_ = file->message_type(5);
  static const int Poses_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Poses, pose_),
  };
  Poses_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Poses_descriptor_,
      Poses::default_instance_,
      Poses_offsets_,
      -1,
      -1,
      -1,
      sizeof(Poses),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Poses, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Poses, _is_default_instance_));
  Transform_descriptor_ = file->message_type(6);
  static const int Transform_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, transform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, to_),
  };
  Transform_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Transform_descriptor_,
      Transform::default_instance_,
      Transform_offsets_,
      -1,
      -1,
      -1,
      sizeof(Transform),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, _is_default_instance_));
  Twist_descriptor_ = file->message_type(7);
  static const int Twist_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Twist, linear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Twist, angular_),
  };
  Twist_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Twist_descriptor_,
      Twist::default_instance_,
      Twist_offsets_,
      -1,
      -1,
      -1,
      sizeof(Twist),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Twist, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Twist, _is_default_instance_));
  JointState_descriptor_ = file->message_type(8);
  static const int JointState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointState, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointState, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointState, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointState, effort_),
  };
  JointState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      JointState_descriptor_,
      JointState::default_instance_,
      JointState_offsets_,
      -1,
      -1,
      -1,
      sizeof(JointState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointState, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointState, _is_default_instance_));
  GoTo_descriptor_ = file->message_type(9);
  static const int GoTo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoTo, max_forward_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoTo, waypoint_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoTo, waypoint_max_forward_speed_),
  };
  GoTo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GoTo_descriptor_,
      GoTo::default_instance_,
      GoTo_offsets_,
      -1,
      -1,
      -1,
      sizeof(GoTo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoTo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoTo, _is_default_instance_));
  SimpleActionDef_descriptor_ = file->message_type(10);
  static const int SimpleActionDef_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleActionDef, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleActionDef, max_state_),
  };
  SimpleActionDef_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SimpleActionDef_descriptor_,
      SimpleActionDef::default_instance_,
      SimpleActionDef_offsets_,
      -1,
      -1,
      -1,
      sizeof(SimpleActionDef),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleActionDef, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleActionDef, _is_default_instance_));
  SimpleAction_descriptor_ = file->message_type(11);
  static const int SimpleAction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleAction, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleAction, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleAction, state_),
  };
  SimpleAction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SimpleAction_descriptor_,
      SimpleAction::default_instance_,
      SimpleAction_offsets_,
      -1,
      -1,
      -1,
      sizeof(SimpleAction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleAction, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleAction, _is_default_instance_));
  SimpleActions_descriptor_ = file->message_type(12);
  static const int SimpleActions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleActions, actions_),
  };
  SimpleActions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SimpleActions_descriptor_,
      SimpleActions::default_instance_,
      SimpleActions_offsets_,
      -1,
      -1,
      -1,
      sizeof(SimpleActions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleActions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleActions, _is_default_instance_));
  ComplexAction_descriptor_ = file->message_type(13);
  static const int ComplexAction_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexAction, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexAction, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexAction, poses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexAction, twists_),
  };
  ComplexAction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ComplexAction_descriptor_,
      ComplexAction::default_instance_,
      ComplexAction_offsets_,
      -1,
      -1,
      -1,
      sizeof(ComplexAction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexAction, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexAction, _is_default_instance_));
  ComplexActions_descriptor_ = file->message_type(14);
  static const int ComplexActions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexActions, actions_),
  };
  ComplexActions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ComplexActions_descriptor_,
      ComplexActions::default_instance_,
      ComplexActions_offsets_,
      -1,
      -1,
      -1,
      sizeof(ComplexActions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexActions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexActions, _is_default_instance_));
  RobotName_descriptor_ = file->message_type(15);
  static const int RobotName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotName, value_),
  };
  RobotName_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RobotName_descriptor_,
      RobotName::default_instance_,
      RobotName_offsets_,
      -1,
      -1,
      -1,
      sizeof(RobotName),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotName, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotName, _is_default_instance_));
  RobotState_descriptor_ = file->message_type(16);
  static const int RobotState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotState, state_),
  };
  RobotState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RobotState_descriptor_,
      RobotState::default_instance_,
      RobotState_offsets_,
      -1,
      -1,
      -1,
      sizeof(RobotState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotState, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotState, _is_default_instance_));
  LogMessage_descriptor_ = file->message_type(17);
  static const int LogMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMessage, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMessage, message_),
  };
  LogMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogMessage_descriptor_,
      LogMessage::default_instance_,
      LogMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMessage, _is_default_instance_));
  VideoStream_descriptor_ = file->message_type(18);
  static const int VideoStream_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoStream, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoStream, camerapose_),
  };
  VideoStream_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VideoStream_descriptor_,
      VideoStream::default_instance_,
      VideoStream_offsets_,
      -1,
      -1,
      -1,
      sizeof(VideoStream),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoStream, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoStream, _is_default_instance_));
  VideoStreams_descriptor_ = file->message_type(19);
  static const int VideoStreams_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoStreams, stream_),
  };
  VideoStreams_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VideoStreams_descriptor_,
      VideoStreams::default_instance_,
      VideoStreams_offsets_,
      -1,
      -1,
      -1,
      sizeof(VideoStreams),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoStreams, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoStreams, _is_default_instance_));
  SimpleSensor_descriptor_ = file->message_type(20);
  static const int SimpleSensor_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleSensor, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleSensor, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleSensor, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleSensor, value_),
  };
  SimpleSensor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SimpleSensor_descriptor_,
      SimpleSensor::default_instance_,
      SimpleSensor_offsets_,
      -1,
      -1,
      -1,
      sizeof(SimpleSensor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleSensor, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleSensor, _is_default_instance_));
  SimpleSensors_descriptor_ = file->message_type(21);
  static const int SimpleSensors_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleSensors, sensors_),
  };
  SimpleSensors_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SimpleSensors_descriptor_,
      SimpleSensors::default_instance_,
      SimpleSensors_offsets_,
      -1,
      -1,
      -1,
      sizeof(SimpleSensors),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleSensors, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleSensors, _is_default_instance_));
  SimpleActionType_descriptor_ = file->enum_type(0);
  ComplexActionType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RobotRemoteControl_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector2_descriptor_, &Vector2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector3_descriptor_, &Vector3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Position_descriptor_, &Position::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Orientation_descriptor_, &Orientation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Pose_descriptor_, &Pose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Poses_descriptor_, &Poses::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Transform_descriptor_, &Transform::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Twist_descriptor_, &Twist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      JointState_descriptor_, &JointState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GoTo_descriptor_, &GoTo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SimpleActionDef_descriptor_, &SimpleActionDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SimpleAction_descriptor_, &SimpleAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SimpleActions_descriptor_, &SimpleActions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ComplexAction_descriptor_, &ComplexAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ComplexActions_descriptor_, &ComplexActions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RobotName_descriptor_, &RobotName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RobotState_descriptor_, &RobotState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogMessage_descriptor_, &LogMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VideoStream_descriptor_, &VideoStream::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VideoStreams_descriptor_, &VideoStreams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SimpleSensor_descriptor_, &SimpleSensor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SimpleSensors_descriptor_, &SimpleSensors::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RobotRemoteControl_2eproto() {
  delete Vector2::default_instance_;
  delete Vector2_reflection_;
  delete Vector3::default_instance_;
  delete Vector3_reflection_;
  delete Position::default_instance_;
  delete Position_reflection_;
  delete Orientation::default_instance_;
  delete Orientation_reflection_;
  delete Pose::default_instance_;
  delete Pose_reflection_;
  delete Poses::default_instance_;
  delete Poses_reflection_;
  delete Transform::default_instance_;
  delete Transform_reflection_;
  delete Twist::default_instance_;
  delete Twist_reflection_;
  delete JointState::default_instance_;
  delete JointState_reflection_;
  delete GoTo::default_instance_;
  delete GoTo_reflection_;
  delete SimpleActionDef::default_instance_;
  delete SimpleActionDef_reflection_;
  delete SimpleAction::default_instance_;
  delete SimpleAction_reflection_;
  delete SimpleActions::default_instance_;
  delete SimpleActions_reflection_;
  delete ComplexAction::default_instance_;
  delete ComplexAction_reflection_;
  delete ComplexActions::default_instance_;
  delete ComplexActions_reflection_;
  delete RobotName::default_instance_;
  delete RobotName_reflection_;
  delete RobotState::default_instance_;
  delete RobotState_reflection_;
  delete LogMessage::default_instance_;
  delete LogMessage_reflection_;
  delete VideoStream::default_instance_;
  delete VideoStream_reflection_;
  delete VideoStreams::default_instance_;
  delete VideoStreams_reflection_;
  delete SimpleSensor::default_instance_;
  delete SimpleSensor_reflection_;
  delete SimpleSensors::default_instance_;
  delete SimpleSensors_reflection_;
}

void protobuf_AddDesc_RobotRemoteControl_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_RobotRemoteControl_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030RobotRemoteControl.proto\022\024robot_remote"
    "_control\"\037\n\007Vector2\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001("
    "\002\"*\n\007Vector3\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030"
    "\003 \001(\002\"+\n\010Position\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022"
    "\t\n\001z\030\003 \001(\001\"9\n\013Orientation\022\t\n\001x\030\001 \001(\001\022\t\n\001"
    "y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\t\n\001w\030\004 \001(\001\"p\n\004Pose\0220\n"
    "\010position\030\001 \001(\0132\036.robot_remote_control.P"
    "osition\0226\n\013orientation\030\002 \001(\0132!.robot_rem"
    "ote_control.Orientation\"1\n\005Poses\022(\n\004pose"
    "\030\001 \003(\0132\032.robot_remote_control.Pose\"T\n\tTr"
    "ansform\022-\n\ttransform\030\001 \001(\0132\032.robot_remot"
    "e_control.Pose\022\014\n\004from\030\002 \001(\t\022\n\n\002to\030\003 \001(\t"
    "\"f\n\005Twist\022-\n\006linear\030\001 \001(\0132\035.robot_remote"
    "_control.Vector3\022.\n\007angular\030\002 \001(\0132\035.robo"
    "t_remote_control.Vector3\"N\n\nJointState\022\014"
    "\n\004name\030\001 \003(\t\022\020\n\010position\030\002 \003(\001\022\020\n\010veloci"
    "ty\030\003 \003(\001\022\016\n\006effort\030\004 \003(\001\"|\n\004GoTo\022\031\n\021max_"
    "forward_speed\030\001 \001(\001\0225\n\016waypoint_point\030\002 "
    "\001(\0132\035.robot_remote_control.Vector3\022\"\n\032wa"
    "ypoint_max_forward_speed\030\003 \001(\001\"Z\n\017Simple"
    "ActionDef\0224\n\004type\030\001 \001(\0162&.robot_remote_c"
    "ontrol.SimpleActionType\022\021\n\tmax_state\030\002 \001"
    "(\004\"`\n\014SimpleAction\022\014\n\004name\030\001 \001(\t\0223\n\004type"
    "\030\002 \001(\0132%.robot_remote_control.SimpleActi"
    "onDef\022\r\n\005state\030\003 \001(\004\"D\n\rSimpleActions\0223\n"
    "\007actions\030\001 \003(\0132\".robot_remote_control.Si"
    "mpleAction\"\254\001\n\rComplexAction\022\014\n\004name\030\001 \001"
    "(\t\0225\n\004type\030\002 \001(\0162\'.robot_remote_control."
    "ComplexActionType\022)\n\005poses\030\003 \003(\0132\032.robot"
    "_remote_control.Pose\022+\n\006twists\030\004 \003(\0132\033.r"
    "obot_remote_control.Twist\"F\n\016ComplexActi"
    "ons\0224\n\007actions\030\001 \003(\0132#.robot_remote_cont"
    "rol.ComplexAction\"\032\n\tRobotName\022\r\n\005value\030"
    "\001 \001(\t\"\033\n\nRobotState\022\r\n\005state\030\001 \001(\t\",\n\nLo"
    "gMessage\022\r\n\005level\030\001 \001(\r\022\017\n\007message\030\002 \001(\t"
    "\"J\n\013VideoStream\022\013\n\003url\030\001 \001(\t\022.\n\ncamerapo"
    "se\030\002 \001(\0132\032.robot_remote_control.Pose\"A\n\014"
    "VideoStreams\0221\n\006stream\030\001 \003(\0132!.robot_rem"
    "ote_control.VideoStream\"d\n\014SimpleSensor\022"
    "\014\n\004name\030\001 \001(\t\022\n\n\002id\030\002 \001(\r\022+\n\004size\030\003 \001(\0132"
    "\035.robot_remote_control.Vector2\022\r\n\005value\030"
    "\004 \003(\002\"D\n\rSimpleSensors\0223\n\007sensors\030\001 \003(\0132"
    "\".robot_remote_control.SimpleSensor**\n\020S"
    "impleActionType\022\t\n\005VALUE\020\000\022\013\n\007TRIGGER\020\001*"
    "]\n\021ComplexActionType\022\010\n\004POSE\020\000\022\r\n\tPOSE_L"
    "IST\020\001\022\t\n\005TWIST\020\002\022\016\n\nTWIST_LIST\020\003\022\010\n\004AREA"
    "\020\004\022\n\n\006VOLUME\020\005b\006proto3", 1862);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RobotRemoteControl.proto", &protobuf_RegisterTypes);
  Vector2::default_instance_ = new Vector2();
  Vector3::default_instance_ = new Vector3();
  Position::default_instance_ = new Position();
  Orientation::default_instance_ = new Orientation();
  Pose::default_instance_ = new Pose();
  Poses::default_instance_ = new Poses();
  Transform::default_instance_ = new Transform();
  Twist::default_instance_ = new Twist();
  JointState::default_instance_ = new JointState();
  GoTo::default_instance_ = new GoTo();
  SimpleActionDef::default_instance_ = new SimpleActionDef();
  SimpleAction::default_instance_ = new SimpleAction();
  SimpleActions::default_instance_ = new SimpleActions();
  ComplexAction::default_instance_ = new ComplexAction();
  ComplexActions::default_instance_ = new ComplexActions();
  RobotName::default_instance_ = new RobotName();
  RobotState::default_instance_ = new RobotState();
  LogMessage::default_instance_ = new LogMessage();
  VideoStream::default_instance_ = new VideoStream();
  VideoStreams::default_instance_ = new VideoStreams();
  SimpleSensor::default_instance_ = new SimpleSensor();
  SimpleSensors::default_instance_ = new SimpleSensors();
  Vector2::default_instance_->InitAsDefaultInstance();
  Vector3::default_instance_->InitAsDefaultInstance();
  Position::default_instance_->InitAsDefaultInstance();
  Orientation::default_instance_->InitAsDefaultInstance();
  Pose::default_instance_->InitAsDefaultInstance();
  Poses::default_instance_->InitAsDefaultInstance();
  Transform::default_instance_->InitAsDefaultInstance();
  Twist::default_instance_->InitAsDefaultInstance();
  JointState::default_instance_->InitAsDefaultInstance();
  GoTo::default_instance_->InitAsDefaultInstance();
  SimpleActionDef::default_instance_->InitAsDefaultInstance();
  SimpleAction::default_instance_->InitAsDefaultInstance();
  SimpleActions::default_instance_->InitAsDefaultInstance();
  ComplexAction::default_instance_->InitAsDefaultInstance();
  ComplexActions::default_instance_->InitAsDefaultInstance();
  RobotName::default_instance_->InitAsDefaultInstance();
  RobotState::default_instance_->InitAsDefaultInstance();
  LogMessage::default_instance_->InitAsDefaultInstance();
  VideoStream::default_instance_->InitAsDefaultInstance();
  VideoStreams::default_instance_->InitAsDefaultInstance();
  SimpleSensor::default_instance_->InitAsDefaultInstance();
  SimpleSensors::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RobotRemoteControl_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RobotRemoteControl_2eproto {
  StaticDescriptorInitializer_RobotRemoteControl_2eproto() {
    protobuf_AddDesc_RobotRemoteControl_2eproto();
  }
} static_descriptor_initializer_RobotRemoteControl_2eproto_;
const ::google::protobuf::EnumDescriptor* SimpleActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleActionType_descriptor_;
}
bool SimpleActionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ComplexActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComplexActionType_descriptor_;
}
bool ComplexActionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector2::kXFieldNumber;
const int Vector2::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector2::Vector2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_remote_control.Vector2)
}

void Vector2::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Vector2::Vector2(const Vector2& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robot_remote_control.Vector2)
}

void Vector2::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
}

Vector2::~Vector2() {
  // @@protoc_insertion_point(destructor:robot_remote_control.Vector2)
  SharedDtor();
}

void Vector2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector2_descriptor_;
}

const Vector2& Vector2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotRemoteControl_2eproto();
  return *default_instance_;
}

Vector2* Vector2::default_instance_ = NULL;

Vector2* Vector2::New(::google::protobuf::Arena* arena) const {
  Vector2* n = new Vector2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector2::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_remote_control.Vector2)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vector2, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vector2*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

}

bool Vector2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_remote_control.Vector2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_remote_control.Vector2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_remote_control.Vector2)
  return false;
#undef DO_
}

void Vector2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_remote_control.Vector2)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:robot_remote_control.Vector2)
}

::google::protobuf::uint8* Vector2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_remote_control.Vector2)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:robot_remote_control.Vector2)
  return target;
}

int Vector2::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robot_remote_control.Vector2)
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_remote_control.Vector2)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Vector2* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_remote_control.Vector2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_remote_control.Vector2)
    MergeFrom(*source);
  }
}

void Vector2::MergeFrom(const Vector2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_remote_control.Vector2)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Vector2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_remote_control.Vector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2::CopyFrom(const Vector2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_remote_control.Vector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2::IsInitialized() const {

  return true;
}

void Vector2::Swap(Vector2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector2::InternalSwap(Vector2* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector2_descriptor_;
  metadata.reflection = Vector2_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector2

// optional float x = 1;
void Vector2::clear_x() {
  x_ = 0;
}
 float Vector2::x() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.Vector2.x)
  return x_;
}
 void Vector2::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:robot_remote_control.Vector2.x)
}

// optional float y = 2;
void Vector2::clear_y() {
  y_ = 0;
}
 float Vector2::y() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.Vector2.y)
  return y_;
}
 void Vector2::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:robot_remote_control.Vector2.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3::kXFieldNumber;
const int Vector3::kYFieldNumber;
const int Vector3::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3::Vector3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_remote_control.Vector3)
}

void Vector3::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Vector3::Vector3(const Vector3& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robot_remote_control.Vector3)
}

void Vector3::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:robot_remote_control.Vector3)
  SharedDtor();
}

void Vector3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3_descriptor_;
}

const Vector3& Vector3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotRemoteControl_2eproto();
  return *default_instance_;
}

Vector3* Vector3::default_instance_ = NULL;

Vector3* Vector3::New(::google::protobuf::Arena* arena) const {
  Vector3* n = new Vector3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_remote_control.Vector3)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vector3, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vector3*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool Vector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_remote_control.Vector3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_remote_control.Vector3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_remote_control.Vector3)
  return false;
#undef DO_
}

void Vector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_remote_control.Vector3)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:robot_remote_control.Vector3)
}

::google::protobuf::uint8* Vector3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_remote_control.Vector3)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:robot_remote_control.Vector3)
  return target;
}

int Vector3::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robot_remote_control.Vector3)
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_remote_control.Vector3)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Vector3* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_remote_control.Vector3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_remote_control.Vector3)
    MergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_remote_control.Vector3)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Vector3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_remote_control.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_remote_control.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {

  return true;
}

void Vector3::Swap(Vector3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3::InternalSwap(Vector3* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3_descriptor_;
  metadata.reflection = Vector3_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3

// optional float x = 1;
void Vector3::clear_x() {
  x_ = 0;
}
 float Vector3::x() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.Vector3.x)
  return x_;
}
 void Vector3::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:robot_remote_control.Vector3.x)
}

// optional float y = 2;
void Vector3::clear_y() {
  y_ = 0;
}
 float Vector3::y() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.Vector3.y)
  return y_;
}
 void Vector3::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:robot_remote_control.Vector3.y)
}

// optional float z = 3;
void Vector3::clear_z() {
  z_ = 0;
}
 float Vector3::z() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.Vector3.z)
  return z_;
}
 void Vector3::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:robot_remote_control.Vector3.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Position::kXFieldNumber;
const int Position::kYFieldNumber;
const int Position::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Position::Position()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_remote_control.Position)
}

void Position::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Position::Position(const Position& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robot_remote_control.Position)
}

void Position::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:robot_remote_control.Position)
  SharedDtor();
}

void Position::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Position_descriptor_;
}

const Position& Position::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotRemoteControl_2eproto();
  return *default_instance_;
}

Position* Position::default_instance_ = NULL;

Position* Position::New(::google::protobuf::Arena* arena) const {
  Position* n = new Position;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_remote_control.Position)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Position, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Position*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_remote_control.Position)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_remote_control.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_remote_control.Position)
  return false;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_remote_control.Position)
  // optional double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:robot_remote_control.Position)
}

::google::protobuf::uint8* Position::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_remote_control.Position)
  // optional double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:robot_remote_control.Position)
  return target;
}

int Position::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robot_remote_control.Position)
  int total_size = 0;

  // optional double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // optional double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // optional double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_remote_control.Position)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Position* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Position>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_remote_control.Position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_remote_control.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_remote_control.Position)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_remote_control.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_remote_control.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {

  return true;
}

void Position::Swap(Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position::InternalSwap(Position* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Position_descriptor_;
  metadata.reflection = Position_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Position

// optional double x = 1;
void Position::clear_x() {
  x_ = 0;
}
 double Position::x() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.Position.x)
  return x_;
}
 void Position::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:robot_remote_control.Position.x)
}

// optional double y = 2;
void Position::clear_y() {
  y_ = 0;
}
 double Position::y() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.Position.y)
  return y_;
}
 void Position::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:robot_remote_control.Position.y)
}

// optional double z = 3;
void Position::clear_z() {
  z_ = 0;
}
 double Position::z() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.Position.z)
  return z_;
}
 void Position::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:robot_remote_control.Position.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Orientation::kXFieldNumber;
const int Orientation::kYFieldNumber;
const int Orientation::kZFieldNumber;
const int Orientation::kWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Orientation::Orientation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_remote_control.Orientation)
}

void Orientation::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Orientation::Orientation(const Orientation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robot_remote_control.Orientation)
}

void Orientation::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  w_ = 0;
}

Orientation::~Orientation() {
  // @@protoc_insertion_point(destructor:robot_remote_control.Orientation)
  SharedDtor();
}

void Orientation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Orientation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Orientation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Orientation_descriptor_;
}

const Orientation& Orientation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotRemoteControl_2eproto();
  return *default_instance_;
}

Orientation* Orientation::default_instance_ = NULL;

Orientation* Orientation::New(::google::protobuf::Arena* arena) const {
  Orientation* n = new Orientation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Orientation::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_remote_control.Orientation)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Orientation, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Orientation*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, w_);

#undef ZR_HELPER_
#undef ZR_

}

bool Orientation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_remote_control.Orientation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_w;
        break;
      }

      // optional double w = 4;
      case 4: {
        if (tag == 33) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &w_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_remote_control.Orientation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_remote_control.Orientation)
  return false;
#undef DO_
}

void Orientation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_remote_control.Orientation)
  // optional double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // optional double w = 4;
  if (this->w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->w(), output);
  }

  // @@protoc_insertion_point(serialize_end:robot_remote_control.Orientation)
}

::google::protobuf::uint8* Orientation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_remote_control.Orientation)
  // optional double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // optional double w = 4;
  if (this->w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->w(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:robot_remote_control.Orientation)
  return target;
}

int Orientation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robot_remote_control.Orientation)
  int total_size = 0;

  // optional double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // optional double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // optional double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  // optional double w = 4;
  if (this->w() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Orientation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_remote_control.Orientation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Orientation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Orientation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_remote_control.Orientation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_remote_control.Orientation)
    MergeFrom(*source);
  }
}

void Orientation::MergeFrom(const Orientation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_remote_control.Orientation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.w() != 0) {
    set_w(from.w());
  }
}

void Orientation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_remote_control.Orientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Orientation::CopyFrom(const Orientation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_remote_control.Orientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Orientation::IsInitialized() const {

  return true;
}

void Orientation::Swap(Orientation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Orientation::InternalSwap(Orientation* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(w_, other->w_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Orientation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Orientation_descriptor_;
  metadata.reflection = Orientation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Orientation

// optional double x = 1;
void Orientation::clear_x() {
  x_ = 0;
}
 double Orientation::x() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.Orientation.x)
  return x_;
}
 void Orientation::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:robot_remote_control.Orientation.x)
}

// optional double y = 2;
void Orientation::clear_y() {
  y_ = 0;
}
 double Orientation::y() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.Orientation.y)
  return y_;
}
 void Orientation::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:robot_remote_control.Orientation.y)
}

// optional double z = 3;
void Orientation::clear_z() {
  z_ = 0;
}
 double Orientation::z() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.Orientation.z)
  return z_;
}
 void Orientation::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:robot_remote_control.Orientation.z)
}

// optional double w = 4;
void Orientation::clear_w() {
  w_ = 0;
}
 double Orientation::w() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.Orientation.w)
  return w_;
}
 void Orientation::set_w(double value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:robot_remote_control.Orientation.w)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pose::kPositionFieldNumber;
const int Pose::kOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pose::Pose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_remote_control.Pose)
}

void Pose::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  position_ = const_cast< ::robot_remote_control::Position*>(&::robot_remote_control::Position::default_instance());
  orientation_ = const_cast< ::robot_remote_control::Orientation*>(&::robot_remote_control::Orientation::default_instance());
}

Pose::Pose(const Pose& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robot_remote_control.Pose)
}

void Pose::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  position_ = NULL;
  orientation_ = NULL;
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:robot_remote_control.Pose)
  SharedDtor();
}

void Pose::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete orientation_;
  }
}

void Pose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pose_descriptor_;
}

const Pose& Pose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotRemoteControl_2eproto();
  return *default_instance_;
}

Pose* Pose::default_instance_ = NULL;

Pose* Pose::New(::google::protobuf::Arena* arena) const {
  Pose* n = new Pose;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_remote_control.Pose)
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;
}

bool Pose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_remote_control.Pose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .robot_remote_control.Position position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_orientation;
        break;
      }

      // optional .robot_remote_control.Orientation orientation = 2;
      case 2: {
        if (tag == 18) {
         parse_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_remote_control.Pose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_remote_control.Pose)
  return false;
#undef DO_
}

void Pose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_remote_control.Pose)
  // optional .robot_remote_control.Position position = 1;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->position_, output);
  }

  // optional .robot_remote_control.Orientation orientation = 2;
  if (this->has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->orientation_, output);
  }

  // @@protoc_insertion_point(serialize_end:robot_remote_control.Pose)
}

::google::protobuf::uint8* Pose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_remote_control.Pose)
  // optional .robot_remote_control.Position position = 1;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->position_, false, target);
  }

  // optional .robot_remote_control.Orientation orientation = 2;
  if (this->has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->orientation_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:robot_remote_control.Pose)
  return target;
}

int Pose::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robot_remote_control.Pose)
  int total_size = 0;

  // optional .robot_remote_control.Position position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  // optional .robot_remote_control.Orientation orientation = 2;
  if (this->has_orientation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_remote_control.Pose)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Pose* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Pose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_remote_control.Pose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_remote_control.Pose)
    MergeFrom(*source);
  }
}

void Pose::MergeFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_remote_control.Pose)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_position()) {
    mutable_position()->::robot_remote_control::Position::MergeFrom(from.position());
  }
  if (from.has_orientation()) {
    mutable_orientation()->::robot_remote_control::Orientation::MergeFrom(from.orientation());
  }
}

void Pose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_remote_control.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_remote_control.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {

  return true;
}

void Pose::Swap(Pose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pose::InternalSwap(Pose* other) {
  std::swap(position_, other->position_);
  std::swap(orientation_, other->orientation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pose_descriptor_;
  metadata.reflection = Pose_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pose

// optional .robot_remote_control.Position position = 1;
bool Pose::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
void Pose::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
const ::robot_remote_control::Position& Pose::position() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.Pose.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::robot_remote_control::Position* Pose::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::robot_remote_control::Position;
  }
  // @@protoc_insertion_point(field_mutable:robot_remote_control.Pose.position)
  return position_;
}
::robot_remote_control::Position* Pose::release_position() {
  // @@protoc_insertion_point(field_release:robot_remote_control.Pose.position)
  
  ::robot_remote_control::Position* temp = position_;
  position_ = NULL;
  return temp;
}
void Pose::set_allocated_position(::robot_remote_control::Position* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:robot_remote_control.Pose.position)
}

// optional .robot_remote_control.Orientation orientation = 2;
bool Pose::has_orientation() const {
  return !_is_default_instance_ && orientation_ != NULL;
}
void Pose::clear_orientation() {
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;
}
const ::robot_remote_control::Orientation& Pose::orientation() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.Pose.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
::robot_remote_control::Orientation* Pose::mutable_orientation() {
  
  if (orientation_ == NULL) {
    orientation_ = new ::robot_remote_control::Orientation;
  }
  // @@protoc_insertion_point(field_mutable:robot_remote_control.Pose.orientation)
  return orientation_;
}
::robot_remote_control::Orientation* Pose::release_orientation() {
  // @@protoc_insertion_point(field_release:robot_remote_control.Pose.orientation)
  
  ::robot_remote_control::Orientation* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
void Pose::set_allocated_orientation(::robot_remote_control::Orientation* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:robot_remote_control.Pose.orientation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Poses::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Poses::Poses()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_remote_control.Poses)
}

void Poses::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Poses::Poses(const Poses& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robot_remote_control.Poses)
}

void Poses::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Poses::~Poses() {
  // @@protoc_insertion_point(destructor:robot_remote_control.Poses)
  SharedDtor();
}

void Poses::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Poses::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Poses::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Poses_descriptor_;
}

const Poses& Poses::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotRemoteControl_2eproto();
  return *default_instance_;
}

Poses* Poses::default_instance_ = NULL;

Poses* Poses::New(::google::protobuf::Arena* arena) const {
  Poses* n = new Poses;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Poses::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_remote_control.Poses)
  pose_.Clear();
}

bool Poses::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_remote_control.Poses)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .robot_remote_control.Pose pose = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_pose;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_remote_control.Poses)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_remote_control.Poses)
  return false;
#undef DO_
}

void Poses::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_remote_control.Poses)
  // repeated .robot_remote_control.Pose pose = 1;
  for (unsigned int i = 0, n = this->pose_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pose(i), output);
  }

  // @@protoc_insertion_point(serialize_end:robot_remote_control.Poses)
}

::google::protobuf::uint8* Poses::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_remote_control.Poses)
  // repeated .robot_remote_control.Pose pose = 1;
  for (unsigned int i = 0, n = this->pose_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pose(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:robot_remote_control.Poses)
  return target;
}

int Poses::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robot_remote_control.Poses)
  int total_size = 0;

  // repeated .robot_remote_control.Pose pose = 1;
  total_size += 1 * this->pose_size();
  for (int i = 0; i < this->pose_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pose(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Poses::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_remote_control.Poses)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Poses* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Poses>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_remote_control.Poses)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_remote_control.Poses)
    MergeFrom(*source);
  }
}

void Poses::MergeFrom(const Poses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_remote_control.Poses)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pose_.MergeFrom(from.pose_);
}

void Poses::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_remote_control.Poses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Poses::CopyFrom(const Poses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_remote_control.Poses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Poses::IsInitialized() const {

  return true;
}

void Poses::Swap(Poses* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Poses::InternalSwap(Poses* other) {
  pose_.UnsafeArenaSwap(&other->pose_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Poses::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Poses_descriptor_;
  metadata.reflection = Poses_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Poses

// repeated .robot_remote_control.Pose pose = 1;
int Poses::pose_size() const {
  return pose_.size();
}
void Poses::clear_pose() {
  pose_.Clear();
}
const ::robot_remote_control::Pose& Poses::pose(int index) const {
  // @@protoc_insertion_point(field_get:robot_remote_control.Poses.pose)
  return pose_.Get(index);
}
::robot_remote_control::Pose* Poses::mutable_pose(int index) {
  // @@protoc_insertion_point(field_mutable:robot_remote_control.Poses.pose)
  return pose_.Mutable(index);
}
::robot_remote_control::Pose* Poses::add_pose() {
  // @@protoc_insertion_point(field_add:robot_remote_control.Poses.pose)
  return pose_.Add();
}
::google::protobuf::RepeatedPtrField< ::robot_remote_control::Pose >*
Poses::mutable_pose() {
  // @@protoc_insertion_point(field_mutable_list:robot_remote_control.Poses.pose)
  return &pose_;
}
const ::google::protobuf::RepeatedPtrField< ::robot_remote_control::Pose >&
Poses::pose() const {
  // @@protoc_insertion_point(field_list:robot_remote_control.Poses.pose)
  return pose_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transform::kTransformFieldNumber;
const int Transform::kFromFieldNumber;
const int Transform::kToFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transform::Transform()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_remote_control.Transform)
}

void Transform::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  transform_ = const_cast< ::robot_remote_control::Pose*>(&::robot_remote_control::Pose::default_instance());
}

Transform::Transform(const Transform& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robot_remote_control.Transform)
}

void Transform::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  transform_ = NULL;
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Transform::~Transform() {
  // @@protoc_insertion_point(destructor:robot_remote_control.Transform)
  SharedDtor();
}

void Transform::SharedDtor() {
  from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete transform_;
  }
}

void Transform::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transform::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transform_descriptor_;
}

const Transform& Transform::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotRemoteControl_2eproto();
  return *default_instance_;
}

Transform* Transform::default_instance_ = NULL;

Transform* Transform::New(::google::protobuf::Arena* arena) const {
  Transform* n = new Transform;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transform::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_remote_control.Transform)
  if (GetArenaNoVirtual() == NULL && transform_ != NULL) delete transform_;
  transform_ = NULL;
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Transform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_remote_control.Transform)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .robot_remote_control.Pose transform = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_from;
        break;
      }

      // optional string from = 2;
      case 2: {
        if (tag == 18) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "robot_remote_control.Transform.from"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_to;
        break;
      }

      // optional string to = 3;
      case 3: {
        if (tag == 26) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to().data(), this->to().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "robot_remote_control.Transform.to"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_remote_control.Transform)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_remote_control.Transform)
  return false;
#undef DO_
}

void Transform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_remote_control.Transform)
  // optional .robot_remote_control.Pose transform = 1;
  if (this->has_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->transform_, output);
  }

  // optional string from = 2;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "robot_remote_control.Transform.from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->from(), output);
  }

  // optional string to = 3;
  if (this->to().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "robot_remote_control.Transform.to");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->to(), output);
  }

  // @@protoc_insertion_point(serialize_end:robot_remote_control.Transform)
}

::google::protobuf::uint8* Transform::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_remote_control.Transform)
  // optional .robot_remote_control.Pose transform = 1;
  if (this->has_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->transform_, false, target);
  }

  // optional string from = 2;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "robot_remote_control.Transform.from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->from(), target);
  }

  // optional string to = 3;
  if (this->to().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "robot_remote_control.Transform.to");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->to(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:robot_remote_control.Transform)
  return target;
}

int Transform::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robot_remote_control.Transform)
  int total_size = 0;

  // optional .robot_remote_control.Pose transform = 1;
  if (this->has_transform()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transform_);
  }

  // optional string from = 2;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from());
  }

  // optional string to = 3;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transform::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_remote_control.Transform)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Transform* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Transform>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_remote_control.Transform)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_remote_control.Transform)
    MergeFrom(*source);
  }
}

void Transform::MergeFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_remote_control.Transform)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_transform()) {
    mutable_transform()->::robot_remote_control::Pose::MergeFrom(from.transform());
  }
  if (from.from().size() > 0) {

    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  if (from.to().size() > 0) {

    to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
}

void Transform::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_remote_control.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transform::CopyFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_remote_control.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transform::IsInitialized() const {

  return true;
}

void Transform::Swap(Transform* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transform::InternalSwap(Transform* other) {
  std::swap(transform_, other->transform_);
  from_.Swap(&other->from_);
  to_.Swap(&other->to_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transform::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transform_descriptor_;
  metadata.reflection = Transform_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transform

// optional .robot_remote_control.Pose transform = 1;
bool Transform::has_transform() const {
  return !_is_default_instance_ && transform_ != NULL;
}
void Transform::clear_transform() {
  if (GetArenaNoVirtual() == NULL && transform_ != NULL) delete transform_;
  transform_ = NULL;
}
const ::robot_remote_control::Pose& Transform::transform() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.Transform.transform)
  return transform_ != NULL ? *transform_ : *default_instance_->transform_;
}
::robot_remote_control::Pose* Transform::mutable_transform() {
  
  if (transform_ == NULL) {
    transform_ = new ::robot_remote_control::Pose;
  }
  // @@protoc_insertion_point(field_mutable:robot_remote_control.Transform.transform)
  return transform_;
}
::robot_remote_control::Pose* Transform::release_transform() {
  // @@protoc_insertion_point(field_release:robot_remote_control.Transform.transform)
  
  ::robot_remote_control::Pose* temp = transform_;
  transform_ = NULL;
  return temp;
}
void Transform::set_allocated_transform(::robot_remote_control::Pose* transform) {
  delete transform_;
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:robot_remote_control.Transform.transform)
}

// optional string from = 2;
void Transform::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Transform::from() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.Transform.from)
  return from_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transform::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robot_remote_control.Transform.from)
}
 void Transform::set_from(const char* value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robot_remote_control.Transform.from)
}
 void Transform::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robot_remote_control.Transform.from)
}
 ::std::string* Transform::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:robot_remote_control.Transform.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transform::release_from() {
  // @@protoc_insertion_point(field_release:robot_remote_control.Transform.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transform::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:robot_remote_control.Transform.from)
}

// optional string to = 3;
void Transform::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Transform::to() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.Transform.to)
  return to_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transform::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robot_remote_control.Transform.to)
}
 void Transform::set_to(const char* value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robot_remote_control.Transform.to)
}
 void Transform::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robot_remote_control.Transform.to)
}
 ::std::string* Transform::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:robot_remote_control.Transform.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transform::release_to() {
  // @@protoc_insertion_point(field_release:robot_remote_control.Transform.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transform::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:robot_remote_control.Transform.to)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Twist::kLinearFieldNumber;
const int Twist::kAngularFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Twist::Twist()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_remote_control.Twist)
}

void Twist::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  linear_ = const_cast< ::robot_remote_control::Vector3*>(&::robot_remote_control::Vector3::default_instance());
  angular_ = const_cast< ::robot_remote_control::Vector3*>(&::robot_remote_control::Vector3::default_instance());
}

Twist::Twist(const Twist& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robot_remote_control.Twist)
}

void Twist::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  linear_ = NULL;
  angular_ = NULL;
}

Twist::~Twist() {
  // @@protoc_insertion_point(destructor:robot_remote_control.Twist)
  SharedDtor();
}

void Twist::SharedDtor() {
  if (this != default_instance_) {
    delete linear_;
    delete angular_;
  }
}

void Twist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Twist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Twist_descriptor_;
}

const Twist& Twist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotRemoteControl_2eproto();
  return *default_instance_;
}

Twist* Twist::default_instance_ = NULL;

Twist* Twist::New(::google::protobuf::Arena* arena) const {
  Twist* n = new Twist;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Twist::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_remote_control.Twist)
  if (GetArenaNoVirtual() == NULL && linear_ != NULL) delete linear_;
  linear_ = NULL;
  if (GetArenaNoVirtual() == NULL && angular_ != NULL) delete angular_;
  angular_ = NULL;
}

bool Twist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_remote_control.Twist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .robot_remote_control.Vector3 linear = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_angular;
        break;
      }

      // optional .robot_remote_control.Vector3 angular = 2;
      case 2: {
        if (tag == 18) {
         parse_angular:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_remote_control.Twist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_remote_control.Twist)
  return false;
#undef DO_
}

void Twist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_remote_control.Twist)
  // optional .robot_remote_control.Vector3 linear = 1;
  if (this->has_linear()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->linear_, output);
  }

  // optional .robot_remote_control.Vector3 angular = 2;
  if (this->has_angular()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->angular_, output);
  }

  // @@protoc_insertion_point(serialize_end:robot_remote_control.Twist)
}

::google::protobuf::uint8* Twist::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_remote_control.Twist)
  // optional .robot_remote_control.Vector3 linear = 1;
  if (this->has_linear()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->linear_, false, target);
  }

  // optional .robot_remote_control.Vector3 angular = 2;
  if (this->has_angular()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->angular_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:robot_remote_control.Twist)
  return target;
}

int Twist::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robot_remote_control.Twist)
  int total_size = 0;

  // optional .robot_remote_control.Vector3 linear = 1;
  if (this->has_linear()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linear_);
  }

  // optional .robot_remote_control.Vector3 angular = 2;
  if (this->has_angular()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angular_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Twist::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_remote_control.Twist)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Twist* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Twist>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_remote_control.Twist)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_remote_control.Twist)
    MergeFrom(*source);
  }
}

void Twist::MergeFrom(const Twist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_remote_control.Twist)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_linear()) {
    mutable_linear()->::robot_remote_control::Vector3::MergeFrom(from.linear());
  }
  if (from.has_angular()) {
    mutable_angular()->::robot_remote_control::Vector3::MergeFrom(from.angular());
  }
}

void Twist::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_remote_control.Twist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Twist::CopyFrom(const Twist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_remote_control.Twist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Twist::IsInitialized() const {

  return true;
}

void Twist::Swap(Twist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Twist::InternalSwap(Twist* other) {
  std::swap(linear_, other->linear_);
  std::swap(angular_, other->angular_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Twist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Twist_descriptor_;
  metadata.reflection = Twist_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Twist

// optional .robot_remote_control.Vector3 linear = 1;
bool Twist::has_linear() const {
  return !_is_default_instance_ && linear_ != NULL;
}
void Twist::clear_linear() {
  if (GetArenaNoVirtual() == NULL && linear_ != NULL) delete linear_;
  linear_ = NULL;
}
const ::robot_remote_control::Vector3& Twist::linear() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.Twist.linear)
  return linear_ != NULL ? *linear_ : *default_instance_->linear_;
}
::robot_remote_control::Vector3* Twist::mutable_linear() {
  
  if (linear_ == NULL) {
    linear_ = new ::robot_remote_control::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:robot_remote_control.Twist.linear)
  return linear_;
}
::robot_remote_control::Vector3* Twist::release_linear() {
  // @@protoc_insertion_point(field_release:robot_remote_control.Twist.linear)
  
  ::robot_remote_control::Vector3* temp = linear_;
  linear_ = NULL;
  return temp;
}
void Twist::set_allocated_linear(::robot_remote_control::Vector3* linear) {
  delete linear_;
  linear_ = linear;
  if (linear) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:robot_remote_control.Twist.linear)
}

// optional .robot_remote_control.Vector3 angular = 2;
bool Twist::has_angular() const {
  return !_is_default_instance_ && angular_ != NULL;
}
void Twist::clear_angular() {
  if (GetArenaNoVirtual() == NULL && angular_ != NULL) delete angular_;
  angular_ = NULL;
}
const ::robot_remote_control::Vector3& Twist::angular() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.Twist.angular)
  return angular_ != NULL ? *angular_ : *default_instance_->angular_;
}
::robot_remote_control::Vector3* Twist::mutable_angular() {
  
  if (angular_ == NULL) {
    angular_ = new ::robot_remote_control::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:robot_remote_control.Twist.angular)
  return angular_;
}
::robot_remote_control::Vector3* Twist::release_angular() {
  // @@protoc_insertion_point(field_release:robot_remote_control.Twist.angular)
  
  ::robot_remote_control::Vector3* temp = angular_;
  angular_ = NULL;
  return temp;
}
void Twist::set_allocated_angular(::robot_remote_control::Vector3* angular) {
  delete angular_;
  angular_ = angular;
  if (angular) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:robot_remote_control.Twist.angular)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JointState::kNameFieldNumber;
const int JointState::kPositionFieldNumber;
const int JointState::kVelocityFieldNumber;
const int JointState::kEffortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JointState::JointState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_remote_control.JointState)
}

void JointState::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

JointState::JointState(const JointState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robot_remote_control.JointState)
}

void JointState::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

JointState::~JointState() {
  // @@protoc_insertion_point(destructor:robot_remote_control.JointState)
  SharedDtor();
}

void JointState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JointState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JointState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JointState_descriptor_;
}

const JointState& JointState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotRemoteControl_2eproto();
  return *default_instance_;
}

JointState* JointState::default_instance_ = NULL;

JointState* JointState::New(::google::protobuf::Arena* arena) const {
  JointState* n = new JointState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JointState::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_remote_control.JointState)
  name_.Clear();
  position_.Clear();
  velocity_.Clear();
  effort_.Clear();
}

bool JointState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_remote_control.JointState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string name = 1;
      case 1: {
        if (tag == 10) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name(this->name_size() - 1).data(),
            this->name(this->name_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "robot_remote_control.JointState.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_name;
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // repeated double position = 2;
      case 2: {
        if (tag == 18) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_position())));
        } else if (tag == 17) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18, input, this->mutable_position())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_velocity;
        break;
      }

      // repeated double velocity = 3;
      case 3: {
        if (tag == 26) {
         parse_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_velocity())));
        } else if (tag == 25) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_velocity())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_effort;
        break;
      }

      // repeated double effort = 4;
      case 4: {
        if (tag == 34) {
         parse_effort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_effort())));
        } else if (tag == 33) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34, input, this->mutable_effort())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_remote_control.JointState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_remote_control.JointState)
  return false;
#undef DO_
}

void JointState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_remote_control.JointState)
  // repeated string name = 1;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "robot_remote_control.JointState.name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(i), output);
  }

  // repeated double position = 2;
  if (this->position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_position_cached_byte_size_);
  }
  for (int i = 0; i < this->position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->position(i), output);
  }

  // repeated double velocity = 3;
  if (this->velocity_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_velocity_cached_byte_size_);
  }
  for (int i = 0; i < this->velocity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->velocity(i), output);
  }

  // repeated double effort = 4;
  if (this->effort_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_effort_cached_byte_size_);
  }
  for (int i = 0; i < this->effort_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->effort(i), output);
  }

  // @@protoc_insertion_point(serialize_end:robot_remote_control.JointState)
}

::google::protobuf::uint8* JointState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_remote_control.JointState)
  // repeated string name = 1;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "robot_remote_control.JointState.name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->name(i), target);
  }

  // repeated double position = 2;
  if (this->position_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _position_cached_byte_size_, target);
  }
  for (int i = 0; i < this->position_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->position(i), target);
  }

  // repeated double velocity = 3;
  if (this->velocity_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _velocity_cached_byte_size_, target);
  }
  for (int i = 0; i < this->velocity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->velocity(i), target);
  }

  // repeated double effort = 4;
  if (this->effort_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _effort_cached_byte_size_, target);
  }
  for (int i = 0; i < this->effort_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->effort(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:robot_remote_control.JointState)
  return target;
}

int JointState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robot_remote_control.JointState)
  int total_size = 0;

  // repeated string name = 1;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }

  // repeated double position = 2;
  {
    int data_size = 0;
    data_size = 8 * this->position_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double velocity = 3;
  {
    int data_size = 0;
    data_size = 8 * this->velocity_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _velocity_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double effort = 4;
  {
    int data_size = 0;
    data_size = 8 * this->effort_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _effort_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JointState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_remote_control.JointState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const JointState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const JointState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_remote_control.JointState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_remote_control.JointState)
    MergeFrom(*source);
  }
}

void JointState::MergeFrom(const JointState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_remote_control.JointState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  name_.MergeFrom(from.name_);
  position_.MergeFrom(from.position_);
  velocity_.MergeFrom(from.velocity_);
  effort_.MergeFrom(from.effort_);
}

void JointState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_remote_control.JointState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointState::CopyFrom(const JointState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_remote_control.JointState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointState::IsInitialized() const {

  return true;
}

void JointState::Swap(JointState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JointState::InternalSwap(JointState* other) {
  name_.UnsafeArenaSwap(&other->name_);
  position_.UnsafeArenaSwap(&other->position_);
  velocity_.UnsafeArenaSwap(&other->velocity_);
  effort_.UnsafeArenaSwap(&other->effort_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JointState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JointState_descriptor_;
  metadata.reflection = JointState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JointState

// repeated string name = 1;
int JointState::name_size() const {
  return name_.size();
}
void JointState::clear_name() {
  name_.Clear();
}
 const ::std::string& JointState::name(int index) const {
  // @@protoc_insertion_point(field_get:robot_remote_control.JointState.name)
  return name_.Get(index);
}
 ::std::string* JointState::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:robot_remote_control.JointState.name)
  return name_.Mutable(index);
}
 void JointState::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:robot_remote_control.JointState.name)
  name_.Mutable(index)->assign(value);
}
 void JointState::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:robot_remote_control.JointState.name)
}
 void JointState::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:robot_remote_control.JointState.name)
}
 ::std::string* JointState::add_name() {
  // @@protoc_insertion_point(field_add_mutable:robot_remote_control.JointState.name)
  return name_.Add();
}
 void JointState::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:robot_remote_control.JointState.name)
}
 void JointState::add_name(const char* value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:robot_remote_control.JointState.name)
}
 void JointState::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:robot_remote_control.JointState.name)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
JointState::name() const {
  // @@protoc_insertion_point(field_list:robot_remote_control.JointState.name)
  return name_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
JointState::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:robot_remote_control.JointState.name)
  return &name_;
}

// repeated double position = 2;
int JointState::position_size() const {
  return position_.size();
}
void JointState::clear_position() {
  position_.Clear();
}
 double JointState::position(int index) const {
  // @@protoc_insertion_point(field_get:robot_remote_control.JointState.position)
  return position_.Get(index);
}
 void JointState::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:robot_remote_control.JointState.position)
}
 void JointState::add_position(double value) {
  position_.Add(value);
  // @@protoc_insertion_point(field_add:robot_remote_control.JointState.position)
}
 const ::google::protobuf::RepeatedField< double >&
JointState::position() const {
  // @@protoc_insertion_point(field_list:robot_remote_control.JointState.position)
  return position_;
}
 ::google::protobuf::RepeatedField< double >*
JointState::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:robot_remote_control.JointState.position)
  return &position_;
}

// repeated double velocity = 3;
int JointState::velocity_size() const {
  return velocity_.size();
}
void JointState::clear_velocity() {
  velocity_.Clear();
}
 double JointState::velocity(int index) const {
  // @@protoc_insertion_point(field_get:robot_remote_control.JointState.velocity)
  return velocity_.Get(index);
}
 void JointState::set_velocity(int index, double value) {
  velocity_.Set(index, value);
  // @@protoc_insertion_point(field_set:robot_remote_control.JointState.velocity)
}
 void JointState::add_velocity(double value) {
  velocity_.Add(value);
  // @@protoc_insertion_point(field_add:robot_remote_control.JointState.velocity)
}
 const ::google::protobuf::RepeatedField< double >&
JointState::velocity() const {
  // @@protoc_insertion_point(field_list:robot_remote_control.JointState.velocity)
  return velocity_;
}
 ::google::protobuf::RepeatedField< double >*
JointState::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable_list:robot_remote_control.JointState.velocity)
  return &velocity_;
}

// repeated double effort = 4;
int JointState::effort_size() const {
  return effort_.size();
}
void JointState::clear_effort() {
  effort_.Clear();
}
 double JointState::effort(int index) const {
  // @@protoc_insertion_point(field_get:robot_remote_control.JointState.effort)
  return effort_.Get(index);
}
 void JointState::set_effort(int index, double value) {
  effort_.Set(index, value);
  // @@protoc_insertion_point(field_set:robot_remote_control.JointState.effort)
}
 void JointState::add_effort(double value) {
  effort_.Add(value);
  // @@protoc_insertion_point(field_add:robot_remote_control.JointState.effort)
}
 const ::google::protobuf::RepeatedField< double >&
JointState::effort() const {
  // @@protoc_insertion_point(field_list:robot_remote_control.JointState.effort)
  return effort_;
}
 ::google::protobuf::RepeatedField< double >*
JointState::mutable_effort() {
  // @@protoc_insertion_point(field_mutable_list:robot_remote_control.JointState.effort)
  return &effort_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GoTo::kMaxForwardSpeedFieldNumber;
const int GoTo::kWaypointPointFieldNumber;
const int GoTo::kWaypointMaxForwardSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GoTo::GoTo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_remote_control.GoTo)
}

void GoTo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  waypoint_point_ = const_cast< ::robot_remote_control::Vector3*>(&::robot_remote_control::Vector3::default_instance());
}

GoTo::GoTo(const GoTo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robot_remote_control.GoTo)
}

void GoTo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  max_forward_speed_ = 0;
  waypoint_point_ = NULL;
  waypoint_max_forward_speed_ = 0;
}

GoTo::~GoTo() {
  // @@protoc_insertion_point(destructor:robot_remote_control.GoTo)
  SharedDtor();
}

void GoTo::SharedDtor() {
  if (this != default_instance_) {
    delete waypoint_point_;
  }
}

void GoTo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoTo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoTo_descriptor_;
}

const GoTo& GoTo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotRemoteControl_2eproto();
  return *default_instance_;
}

GoTo* GoTo::default_instance_ = NULL;

GoTo* GoTo::New(::google::protobuf::Arena* arena) const {
  GoTo* n = new GoTo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GoTo::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_remote_control.GoTo)
  max_forward_speed_ = 0;
  if (GetArenaNoVirtual() == NULL && waypoint_point_ != NULL) delete waypoint_point_;
  waypoint_point_ = NULL;
  waypoint_max_forward_speed_ = 0;
}

bool GoTo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_remote_control.GoTo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double max_forward_speed = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_forward_speed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_waypoint_point;
        break;
      }

      // optional .robot_remote_control.Vector3 waypoint_point = 2;
      case 2: {
        if (tag == 18) {
         parse_waypoint_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_waypoint_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_waypoint_max_forward_speed;
        break;
      }

      // optional double waypoint_max_forward_speed = 3;
      case 3: {
        if (tag == 25) {
         parse_waypoint_max_forward_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &waypoint_max_forward_speed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_remote_control.GoTo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_remote_control.GoTo)
  return false;
#undef DO_
}

void GoTo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_remote_control.GoTo)
  // optional double max_forward_speed = 1;
  if (this->max_forward_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->max_forward_speed(), output);
  }

  // optional .robot_remote_control.Vector3 waypoint_point = 2;
  if (this->has_waypoint_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->waypoint_point_, output);
  }

  // optional double waypoint_max_forward_speed = 3;
  if (this->waypoint_max_forward_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->waypoint_max_forward_speed(), output);
  }

  // @@protoc_insertion_point(serialize_end:robot_remote_control.GoTo)
}

::google::protobuf::uint8* GoTo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_remote_control.GoTo)
  // optional double max_forward_speed = 1;
  if (this->max_forward_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->max_forward_speed(), target);
  }

  // optional .robot_remote_control.Vector3 waypoint_point = 2;
  if (this->has_waypoint_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->waypoint_point_, false, target);
  }

  // optional double waypoint_max_forward_speed = 3;
  if (this->waypoint_max_forward_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->waypoint_max_forward_speed(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:robot_remote_control.GoTo)
  return target;
}

int GoTo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robot_remote_control.GoTo)
  int total_size = 0;

  // optional double max_forward_speed = 1;
  if (this->max_forward_speed() != 0) {
    total_size += 1 + 8;
  }

  // optional .robot_remote_control.Vector3 waypoint_point = 2;
  if (this->has_waypoint_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->waypoint_point_);
  }

  // optional double waypoint_max_forward_speed = 3;
  if (this->waypoint_max_forward_speed() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoTo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_remote_control.GoTo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GoTo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GoTo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_remote_control.GoTo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_remote_control.GoTo)
    MergeFrom(*source);
  }
}

void GoTo::MergeFrom(const GoTo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_remote_control.GoTo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.max_forward_speed() != 0) {
    set_max_forward_speed(from.max_forward_speed());
  }
  if (from.has_waypoint_point()) {
    mutable_waypoint_point()->::robot_remote_control::Vector3::MergeFrom(from.waypoint_point());
  }
  if (from.waypoint_max_forward_speed() != 0) {
    set_waypoint_max_forward_speed(from.waypoint_max_forward_speed());
  }
}

void GoTo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_remote_control.GoTo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoTo::CopyFrom(const GoTo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_remote_control.GoTo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoTo::IsInitialized() const {

  return true;
}

void GoTo::Swap(GoTo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GoTo::InternalSwap(GoTo* other) {
  std::swap(max_forward_speed_, other->max_forward_speed_);
  std::swap(waypoint_point_, other->waypoint_point_);
  std::swap(waypoint_max_forward_speed_, other->waypoint_max_forward_speed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GoTo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoTo_descriptor_;
  metadata.reflection = GoTo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GoTo

// optional double max_forward_speed = 1;
void GoTo::clear_max_forward_speed() {
  max_forward_speed_ = 0;
}
 double GoTo::max_forward_speed() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.GoTo.max_forward_speed)
  return max_forward_speed_;
}
 void GoTo::set_max_forward_speed(double value) {
  
  max_forward_speed_ = value;
  // @@protoc_insertion_point(field_set:robot_remote_control.GoTo.max_forward_speed)
}

// optional .robot_remote_control.Vector3 waypoint_point = 2;
bool GoTo::has_waypoint_point() const {
  return !_is_default_instance_ && waypoint_point_ != NULL;
}
void GoTo::clear_waypoint_point() {
  if (GetArenaNoVirtual() == NULL && waypoint_point_ != NULL) delete waypoint_point_;
  waypoint_point_ = NULL;
}
const ::robot_remote_control::Vector3& GoTo::waypoint_point() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.GoTo.waypoint_point)
  return waypoint_point_ != NULL ? *waypoint_point_ : *default_instance_->waypoint_point_;
}
::robot_remote_control::Vector3* GoTo::mutable_waypoint_point() {
  
  if (waypoint_point_ == NULL) {
    waypoint_point_ = new ::robot_remote_control::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:robot_remote_control.GoTo.waypoint_point)
  return waypoint_point_;
}
::robot_remote_control::Vector3* GoTo::release_waypoint_point() {
  // @@protoc_insertion_point(field_release:robot_remote_control.GoTo.waypoint_point)
  
  ::robot_remote_control::Vector3* temp = waypoint_point_;
  waypoint_point_ = NULL;
  return temp;
}
void GoTo::set_allocated_waypoint_point(::robot_remote_control::Vector3* waypoint_point) {
  delete waypoint_point_;
  waypoint_point_ = waypoint_point;
  if (waypoint_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:robot_remote_control.GoTo.waypoint_point)
}

// optional double waypoint_max_forward_speed = 3;
void GoTo::clear_waypoint_max_forward_speed() {
  waypoint_max_forward_speed_ = 0;
}
 double GoTo::waypoint_max_forward_speed() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.GoTo.waypoint_max_forward_speed)
  return waypoint_max_forward_speed_;
}
 void GoTo::set_waypoint_max_forward_speed(double value) {
  
  waypoint_max_forward_speed_ = value;
  // @@protoc_insertion_point(field_set:robot_remote_control.GoTo.waypoint_max_forward_speed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleActionDef::kTypeFieldNumber;
const int SimpleActionDef::kMaxStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleActionDef::SimpleActionDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_remote_control.SimpleActionDef)
}

void SimpleActionDef::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SimpleActionDef::SimpleActionDef(const SimpleActionDef& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robot_remote_control.SimpleActionDef)
}

void SimpleActionDef::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  max_state_ = GOOGLE_ULONGLONG(0);
}

SimpleActionDef::~SimpleActionDef() {
  // @@protoc_insertion_point(destructor:robot_remote_control.SimpleActionDef)
  SharedDtor();
}

void SimpleActionDef::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimpleActionDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleActionDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleActionDef_descriptor_;
}

const SimpleActionDef& SimpleActionDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotRemoteControl_2eproto();
  return *default_instance_;
}

SimpleActionDef* SimpleActionDef::default_instance_ = NULL;

SimpleActionDef* SimpleActionDef::New(::google::protobuf::Arena* arena) const {
  SimpleActionDef* n = new SimpleActionDef;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimpleActionDef::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_remote_control.SimpleActionDef)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SimpleActionDef, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SimpleActionDef*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(max_state_, type_);

#undef ZR_HELPER_
#undef ZR_

}

bool SimpleActionDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_remote_control.SimpleActionDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .robot_remote_control.SimpleActionType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::robot_remote_control::SimpleActionType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_state;
        break;
      }

      // optional uint64 max_state = 2;
      case 2: {
        if (tag == 16) {
         parse_max_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_state_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_remote_control.SimpleActionDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_remote_control.SimpleActionDef)
  return false;
#undef DO_
}

void SimpleActionDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_remote_control.SimpleActionDef)
  // optional .robot_remote_control.SimpleActionType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 max_state = 2;
  if (this->max_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->max_state(), output);
  }

  // @@protoc_insertion_point(serialize_end:robot_remote_control.SimpleActionDef)
}

::google::protobuf::uint8* SimpleActionDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_remote_control.SimpleActionDef)
  // optional .robot_remote_control.SimpleActionType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 max_state = 2;
  if (this->max_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->max_state(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:robot_remote_control.SimpleActionDef)
  return target;
}

int SimpleActionDef::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robot_remote_control.SimpleActionDef)
  int total_size = 0;

  // optional .robot_remote_control.SimpleActionType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint64 max_state = 2;
  if (this->max_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->max_state());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleActionDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_remote_control.SimpleActionDef)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SimpleActionDef* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleActionDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_remote_control.SimpleActionDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_remote_control.SimpleActionDef)
    MergeFrom(*source);
  }
}

void SimpleActionDef::MergeFrom(const SimpleActionDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_remote_control.SimpleActionDef)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.max_state() != 0) {
    set_max_state(from.max_state());
  }
}

void SimpleActionDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_remote_control.SimpleActionDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleActionDef::CopyFrom(const SimpleActionDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_remote_control.SimpleActionDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleActionDef::IsInitialized() const {

  return true;
}

void SimpleActionDef::Swap(SimpleActionDef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleActionDef::InternalSwap(SimpleActionDef* other) {
  std::swap(type_, other->type_);
  std::swap(max_state_, other->max_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimpleActionDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleActionDef_descriptor_;
  metadata.reflection = SimpleActionDef_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleActionDef

// optional .robot_remote_control.SimpleActionType type = 1;
void SimpleActionDef::clear_type() {
  type_ = 0;
}
 ::robot_remote_control::SimpleActionType SimpleActionDef::type() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.SimpleActionDef.type)
  return static_cast< ::robot_remote_control::SimpleActionType >(type_);
}
 void SimpleActionDef::set_type(::robot_remote_control::SimpleActionType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:robot_remote_control.SimpleActionDef.type)
}

// optional uint64 max_state = 2;
void SimpleActionDef::clear_max_state() {
  max_state_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 SimpleActionDef::max_state() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.SimpleActionDef.max_state)
  return max_state_;
}
 void SimpleActionDef::set_max_state(::google::protobuf::uint64 value) {
  
  max_state_ = value;
  // @@protoc_insertion_point(field_set:robot_remote_control.SimpleActionDef.max_state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleAction::kNameFieldNumber;
const int SimpleAction::kTypeFieldNumber;
const int SimpleAction::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleAction::SimpleAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_remote_control.SimpleAction)
}

void SimpleAction::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  type_ = const_cast< ::robot_remote_control::SimpleActionDef*>(&::robot_remote_control::SimpleActionDef::default_instance());
}

SimpleAction::SimpleAction(const SimpleAction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robot_remote_control.SimpleAction)
}

void SimpleAction::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = NULL;
  state_ = GOOGLE_ULONGLONG(0);
}

SimpleAction::~SimpleAction() {
  // @@protoc_insertion_point(destructor:robot_remote_control.SimpleAction)
  SharedDtor();
}

void SimpleAction::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete type_;
  }
}

void SimpleAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleAction_descriptor_;
}

const SimpleAction& SimpleAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotRemoteControl_2eproto();
  return *default_instance_;
}

SimpleAction* SimpleAction::default_instance_ = NULL;

SimpleAction* SimpleAction::New(::google::protobuf::Arena* arena) const {
  SimpleAction* n = new SimpleAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimpleAction::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_remote_control.SimpleAction)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && type_ != NULL) delete type_;
  type_ = NULL;
  state_ = GOOGLE_ULONGLONG(0);
}

bool SimpleAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_remote_control.SimpleAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "robot_remote_control.SimpleAction.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional .robot_remote_control.SimpleActionDef type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional uint64 state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &state_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_remote_control.SimpleAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_remote_control.SimpleAction)
  return false;
#undef DO_
}

void SimpleAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_remote_control.SimpleAction)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "robot_remote_control.SimpleAction.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .robot_remote_control.SimpleActionDef type = 2;
  if (this->has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->type_, output);
  }

  // optional uint64 state = 3;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->state(), output);
  }

  // @@protoc_insertion_point(serialize_end:robot_remote_control.SimpleAction)
}

::google::protobuf::uint8* SimpleAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_remote_control.SimpleAction)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "robot_remote_control.SimpleAction.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .robot_remote_control.SimpleActionDef type = 2;
  if (this->has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->type_, false, target);
  }

  // optional uint64 state = 3;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->state(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:robot_remote_control.SimpleAction)
  return target;
}

int SimpleAction::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robot_remote_control.SimpleAction)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .robot_remote_control.SimpleActionDef type = 2;
  if (this->has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->type_);
  }

  // optional uint64 state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->state());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_remote_control.SimpleAction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SimpleAction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_remote_control.SimpleAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_remote_control.SimpleAction)
    MergeFrom(*source);
  }
}

void SimpleAction::MergeFrom(const SimpleAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_remote_control.SimpleAction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_type()) {
    mutable_type()->::robot_remote_control::SimpleActionDef::MergeFrom(from.type());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void SimpleAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_remote_control.SimpleAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleAction::CopyFrom(const SimpleAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_remote_control.SimpleAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleAction::IsInitialized() const {

  return true;
}

void SimpleAction::Swap(SimpleAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleAction::InternalSwap(SimpleAction* other) {
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  std::swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimpleAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleAction_descriptor_;
  metadata.reflection = SimpleAction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleAction

// optional string name = 1;
void SimpleAction::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SimpleAction::name() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.SimpleAction.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SimpleAction::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robot_remote_control.SimpleAction.name)
}
 void SimpleAction::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robot_remote_control.SimpleAction.name)
}
 void SimpleAction::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robot_remote_control.SimpleAction.name)
}
 ::std::string* SimpleAction::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:robot_remote_control.SimpleAction.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SimpleAction::release_name() {
  // @@protoc_insertion_point(field_release:robot_remote_control.SimpleAction.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SimpleAction::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:robot_remote_control.SimpleAction.name)
}

// optional .robot_remote_control.SimpleActionDef type = 2;
bool SimpleAction::has_type() const {
  return !_is_default_instance_ && type_ != NULL;
}
void SimpleAction::clear_type() {
  if (GetArenaNoVirtual() == NULL && type_ != NULL) delete type_;
  type_ = NULL;
}
const ::robot_remote_control::SimpleActionDef& SimpleAction::type() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.SimpleAction.type)
  return type_ != NULL ? *type_ : *default_instance_->type_;
}
::robot_remote_control::SimpleActionDef* SimpleAction::mutable_type() {
  
  if (type_ == NULL) {
    type_ = new ::robot_remote_control::SimpleActionDef;
  }
  // @@protoc_insertion_point(field_mutable:robot_remote_control.SimpleAction.type)
  return type_;
}
::robot_remote_control::SimpleActionDef* SimpleAction::release_type() {
  // @@protoc_insertion_point(field_release:robot_remote_control.SimpleAction.type)
  
  ::robot_remote_control::SimpleActionDef* temp = type_;
  type_ = NULL;
  return temp;
}
void SimpleAction::set_allocated_type(::robot_remote_control::SimpleActionDef* type) {
  delete type_;
  type_ = type;
  if (type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:robot_remote_control.SimpleAction.type)
}

// optional uint64 state = 3;
void SimpleAction::clear_state() {
  state_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 SimpleAction::state() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.SimpleAction.state)
  return state_;
}
 void SimpleAction::set_state(::google::protobuf::uint64 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:robot_remote_control.SimpleAction.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleActions::kActionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleActions::SimpleActions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_remote_control.SimpleActions)
}

void SimpleActions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SimpleActions::SimpleActions(const SimpleActions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robot_remote_control.SimpleActions)
}

void SimpleActions::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SimpleActions::~SimpleActions() {
  // @@protoc_insertion_point(destructor:robot_remote_control.SimpleActions)
  SharedDtor();
}

void SimpleActions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimpleActions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleActions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleActions_descriptor_;
}

const SimpleActions& SimpleActions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotRemoteControl_2eproto();
  return *default_instance_;
}

SimpleActions* SimpleActions::default_instance_ = NULL;

SimpleActions* SimpleActions::New(::google::protobuf::Arena* arena) const {
  SimpleActions* n = new SimpleActions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimpleActions::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_remote_control.SimpleActions)
  actions_.Clear();
}

bool SimpleActions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_remote_control.SimpleActions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .robot_remote_control.SimpleAction actions = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_actions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_actions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_actions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_remote_control.SimpleActions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_remote_control.SimpleActions)
  return false;
#undef DO_
}

void SimpleActions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_remote_control.SimpleActions)
  // repeated .robot_remote_control.SimpleAction actions = 1;
  for (unsigned int i = 0, n = this->actions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->actions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:robot_remote_control.SimpleActions)
}

::google::protobuf::uint8* SimpleActions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_remote_control.SimpleActions)
  // repeated .robot_remote_control.SimpleAction actions = 1;
  for (unsigned int i = 0, n = this->actions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->actions(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:robot_remote_control.SimpleActions)
  return target;
}

int SimpleActions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robot_remote_control.SimpleActions)
  int total_size = 0;

  // repeated .robot_remote_control.SimpleAction actions = 1;
  total_size += 1 * this->actions_size();
  for (int i = 0; i < this->actions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actions(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleActions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_remote_control.SimpleActions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SimpleActions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleActions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_remote_control.SimpleActions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_remote_control.SimpleActions)
    MergeFrom(*source);
  }
}

void SimpleActions::MergeFrom(const SimpleActions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_remote_control.SimpleActions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  actions_.MergeFrom(from.actions_);
}

void SimpleActions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_remote_control.SimpleActions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleActions::CopyFrom(const SimpleActions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_remote_control.SimpleActions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleActions::IsInitialized() const {

  return true;
}

void SimpleActions::Swap(SimpleActions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleActions::InternalSwap(SimpleActions* other) {
  actions_.UnsafeArenaSwap(&other->actions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimpleActions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleActions_descriptor_;
  metadata.reflection = SimpleActions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleActions

// repeated .robot_remote_control.SimpleAction actions = 1;
int SimpleActions::actions_size() const {
  return actions_.size();
}
void SimpleActions::clear_actions() {
  actions_.Clear();
}
const ::robot_remote_control::SimpleAction& SimpleActions::actions(int index) const {
  // @@protoc_insertion_point(field_get:robot_remote_control.SimpleActions.actions)
  return actions_.Get(index);
}
::robot_remote_control::SimpleAction* SimpleActions::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:robot_remote_control.SimpleActions.actions)
  return actions_.Mutable(index);
}
::robot_remote_control::SimpleAction* SimpleActions::add_actions() {
  // @@protoc_insertion_point(field_add:robot_remote_control.SimpleActions.actions)
  return actions_.Add();
}
::google::protobuf::RepeatedPtrField< ::robot_remote_control::SimpleAction >*
SimpleActions::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:robot_remote_control.SimpleActions.actions)
  return &actions_;
}
const ::google::protobuf::RepeatedPtrField< ::robot_remote_control::SimpleAction >&
SimpleActions::actions() const {
  // @@protoc_insertion_point(field_list:robot_remote_control.SimpleActions.actions)
  return actions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComplexAction::kNameFieldNumber;
const int ComplexAction::kTypeFieldNumber;
const int ComplexAction::kPosesFieldNumber;
const int ComplexAction::kTwistsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComplexAction::ComplexAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_remote_control.ComplexAction)
}

void ComplexAction::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ComplexAction::ComplexAction(const ComplexAction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robot_remote_control.ComplexAction)
}

void ComplexAction::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

ComplexAction::~ComplexAction() {
  // @@protoc_insertion_point(destructor:robot_remote_control.ComplexAction)
  SharedDtor();
}

void ComplexAction::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ComplexAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComplexAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComplexAction_descriptor_;
}

const ComplexAction& ComplexAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotRemoteControl_2eproto();
  return *default_instance_;
}

ComplexAction* ComplexAction::default_instance_ = NULL;

ComplexAction* ComplexAction::New(::google::protobuf::Arena* arena) const {
  ComplexAction* n = new ComplexAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ComplexAction::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_remote_control.ComplexAction)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  poses_.Clear();
  twists_.Clear();
}

bool ComplexAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_remote_control.ComplexAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "robot_remote_control.ComplexAction.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .robot_remote_control.ComplexActionType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::robot_remote_control::ComplexActionType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_poses;
        break;
      }

      // repeated .robot_remote_control.Pose poses = 3;
      case 3: {
        if (tag == 26) {
         parse_poses:
          DO_(input->IncrementRecursionDepth());
         parse_loop_poses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_poses()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_poses;
        if (input->ExpectTag(34)) goto parse_loop_twists;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .robot_remote_control.Twist twists = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_twists:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_twists()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_twists;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_remote_control.ComplexAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_remote_control.ComplexAction)
  return false;
#undef DO_
}

void ComplexAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_remote_control.ComplexAction)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "robot_remote_control.ComplexAction.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .robot_remote_control.ComplexActionType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated .robot_remote_control.Pose poses = 3;
  for (unsigned int i = 0, n = this->poses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->poses(i), output);
  }

  // repeated .robot_remote_control.Twist twists = 4;
  for (unsigned int i = 0, n = this->twists_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->twists(i), output);
  }

  // @@protoc_insertion_point(serialize_end:robot_remote_control.ComplexAction)
}

::google::protobuf::uint8* ComplexAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_remote_control.ComplexAction)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "robot_remote_control.ComplexAction.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .robot_remote_control.ComplexActionType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated .robot_remote_control.Pose poses = 3;
  for (unsigned int i = 0, n = this->poses_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->poses(i), false, target);
  }

  // repeated .robot_remote_control.Twist twists = 4;
  for (unsigned int i = 0, n = this->twists_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->twists(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:robot_remote_control.ComplexAction)
  return target;
}

int ComplexAction::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robot_remote_control.ComplexAction)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .robot_remote_control.ComplexActionType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // repeated .robot_remote_control.Pose poses = 3;
  total_size += 1 * this->poses_size();
  for (int i = 0; i < this->poses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->poses(i));
  }

  // repeated .robot_remote_control.Twist twists = 4;
  total_size += 1 * this->twists_size();
  for (int i = 0; i < this->twists_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->twists(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComplexAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_remote_control.ComplexAction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ComplexAction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ComplexAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_remote_control.ComplexAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_remote_control.ComplexAction)
    MergeFrom(*source);
  }
}

void ComplexAction::MergeFrom(const ComplexAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_remote_control.ComplexAction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  poses_.MergeFrom(from.poses_);
  twists_.MergeFrom(from.twists_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ComplexAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_remote_control.ComplexAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComplexAction::CopyFrom(const ComplexAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_remote_control.ComplexAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexAction::IsInitialized() const {

  return true;
}

void ComplexAction::Swap(ComplexAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComplexAction::InternalSwap(ComplexAction* other) {
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  poses_.UnsafeArenaSwap(&other->poses_);
  twists_.UnsafeArenaSwap(&other->twists_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComplexAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComplexAction_descriptor_;
  metadata.reflection = ComplexAction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ComplexAction

// optional string name = 1;
void ComplexAction::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComplexAction::name() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.ComplexAction.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComplexAction::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robot_remote_control.ComplexAction.name)
}
 void ComplexAction::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robot_remote_control.ComplexAction.name)
}
 void ComplexAction::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robot_remote_control.ComplexAction.name)
}
 ::std::string* ComplexAction::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:robot_remote_control.ComplexAction.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComplexAction::release_name() {
  // @@protoc_insertion_point(field_release:robot_remote_control.ComplexAction.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComplexAction::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:robot_remote_control.ComplexAction.name)
}

// optional .robot_remote_control.ComplexActionType type = 2;
void ComplexAction::clear_type() {
  type_ = 0;
}
 ::robot_remote_control::ComplexActionType ComplexAction::type() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.ComplexAction.type)
  return static_cast< ::robot_remote_control::ComplexActionType >(type_);
}
 void ComplexAction::set_type(::robot_remote_control::ComplexActionType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:robot_remote_control.ComplexAction.type)
}

// repeated .robot_remote_control.Pose poses = 3;
int ComplexAction::poses_size() const {
  return poses_.size();
}
void ComplexAction::clear_poses() {
  poses_.Clear();
}
const ::robot_remote_control::Pose& ComplexAction::poses(int index) const {
  // @@protoc_insertion_point(field_get:robot_remote_control.ComplexAction.poses)
  return poses_.Get(index);
}
::robot_remote_control::Pose* ComplexAction::mutable_poses(int index) {
  // @@protoc_insertion_point(field_mutable:robot_remote_control.ComplexAction.poses)
  return poses_.Mutable(index);
}
::robot_remote_control::Pose* ComplexAction::add_poses() {
  // @@protoc_insertion_point(field_add:robot_remote_control.ComplexAction.poses)
  return poses_.Add();
}
::google::protobuf::RepeatedPtrField< ::robot_remote_control::Pose >*
ComplexAction::mutable_poses() {
  // @@protoc_insertion_point(field_mutable_list:robot_remote_control.ComplexAction.poses)
  return &poses_;
}
const ::google::protobuf::RepeatedPtrField< ::robot_remote_control::Pose >&
ComplexAction::poses() const {
  // @@protoc_insertion_point(field_list:robot_remote_control.ComplexAction.poses)
  return poses_;
}

// repeated .robot_remote_control.Twist twists = 4;
int ComplexAction::twists_size() const {
  return twists_.size();
}
void ComplexAction::clear_twists() {
  twists_.Clear();
}
const ::robot_remote_control::Twist& ComplexAction::twists(int index) const {
  // @@protoc_insertion_point(field_get:robot_remote_control.ComplexAction.twists)
  return twists_.Get(index);
}
::robot_remote_control::Twist* ComplexAction::mutable_twists(int index) {
  // @@protoc_insertion_point(field_mutable:robot_remote_control.ComplexAction.twists)
  return twists_.Mutable(index);
}
::robot_remote_control::Twist* ComplexAction::add_twists() {
  // @@protoc_insertion_point(field_add:robot_remote_control.ComplexAction.twists)
  return twists_.Add();
}
::google::protobuf::RepeatedPtrField< ::robot_remote_control::Twist >*
ComplexAction::mutable_twists() {
  // @@protoc_insertion_point(field_mutable_list:robot_remote_control.ComplexAction.twists)
  return &twists_;
}
const ::google::protobuf::RepeatedPtrField< ::robot_remote_control::Twist >&
ComplexAction::twists() const {
  // @@protoc_insertion_point(field_list:robot_remote_control.ComplexAction.twists)
  return twists_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComplexActions::kActionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComplexActions::ComplexActions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_remote_control.ComplexActions)
}

void ComplexActions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ComplexActions::ComplexActions(const ComplexActions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robot_remote_control.ComplexActions)
}

void ComplexActions::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ComplexActions::~ComplexActions() {
  // @@protoc_insertion_point(destructor:robot_remote_control.ComplexActions)
  SharedDtor();
}

void ComplexActions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComplexActions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComplexActions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComplexActions_descriptor_;
}

const ComplexActions& ComplexActions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotRemoteControl_2eproto();
  return *default_instance_;
}

ComplexActions* ComplexActions::default_instance_ = NULL;

ComplexActions* ComplexActions::New(::google::protobuf::Arena* arena) const {
  ComplexActions* n = new ComplexActions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ComplexActions::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_remote_control.ComplexActions)
  actions_.Clear();
}

bool ComplexActions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_remote_control.ComplexActions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .robot_remote_control.ComplexAction actions = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_actions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_actions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_actions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_remote_control.ComplexActions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_remote_control.ComplexActions)
  return false;
#undef DO_
}

void ComplexActions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_remote_control.ComplexActions)
  // repeated .robot_remote_control.ComplexAction actions = 1;
  for (unsigned int i = 0, n = this->actions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->actions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:robot_remote_control.ComplexActions)
}

::google::protobuf::uint8* ComplexActions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_remote_control.ComplexActions)
  // repeated .robot_remote_control.ComplexAction actions = 1;
  for (unsigned int i = 0, n = this->actions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->actions(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:robot_remote_control.ComplexActions)
  return target;
}

int ComplexActions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robot_remote_control.ComplexActions)
  int total_size = 0;

  // repeated .robot_remote_control.ComplexAction actions = 1;
  total_size += 1 * this->actions_size();
  for (int i = 0; i < this->actions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actions(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComplexActions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_remote_control.ComplexActions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ComplexActions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ComplexActions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_remote_control.ComplexActions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_remote_control.ComplexActions)
    MergeFrom(*source);
  }
}

void ComplexActions::MergeFrom(const ComplexActions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_remote_control.ComplexActions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  actions_.MergeFrom(from.actions_);
}

void ComplexActions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_remote_control.ComplexActions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComplexActions::CopyFrom(const ComplexActions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_remote_control.ComplexActions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexActions::IsInitialized() const {

  return true;
}

void ComplexActions::Swap(ComplexActions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComplexActions::InternalSwap(ComplexActions* other) {
  actions_.UnsafeArenaSwap(&other->actions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComplexActions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComplexActions_descriptor_;
  metadata.reflection = ComplexActions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ComplexActions

// repeated .robot_remote_control.ComplexAction actions = 1;
int ComplexActions::actions_size() const {
  return actions_.size();
}
void ComplexActions::clear_actions() {
  actions_.Clear();
}
const ::robot_remote_control::ComplexAction& ComplexActions::actions(int index) const {
  // @@protoc_insertion_point(field_get:robot_remote_control.ComplexActions.actions)
  return actions_.Get(index);
}
::robot_remote_control::ComplexAction* ComplexActions::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:robot_remote_control.ComplexActions.actions)
  return actions_.Mutable(index);
}
::robot_remote_control::ComplexAction* ComplexActions::add_actions() {
  // @@protoc_insertion_point(field_add:robot_remote_control.ComplexActions.actions)
  return actions_.Add();
}
::google::protobuf::RepeatedPtrField< ::robot_remote_control::ComplexAction >*
ComplexActions::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:robot_remote_control.ComplexActions.actions)
  return &actions_;
}
const ::google::protobuf::RepeatedPtrField< ::robot_remote_control::ComplexAction >&
ComplexActions::actions() const {
  // @@protoc_insertion_point(field_list:robot_remote_control.ComplexActions.actions)
  return actions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotName::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotName::RobotName()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_remote_control.RobotName)
}

void RobotName::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RobotName::RobotName(const RobotName& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robot_remote_control.RobotName)
}

void RobotName::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RobotName::~RobotName() {
  // @@protoc_insertion_point(destructor:robot_remote_control.RobotName)
  SharedDtor();
}

void RobotName::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RobotName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotName_descriptor_;
}

const RobotName& RobotName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotRemoteControl_2eproto();
  return *default_instance_;
}

RobotName* RobotName::default_instance_ = NULL;

RobotName* RobotName::New(::google::protobuf::Arena* arena) const {
  RobotName* n = new RobotName;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RobotName::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_remote_control.RobotName)
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RobotName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_remote_control.RobotName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "robot_remote_control.RobotName.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_remote_control.RobotName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_remote_control.RobotName)
  return false;
#undef DO_
}

void RobotName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_remote_control.RobotName)
  // optional string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "robot_remote_control.RobotName.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:robot_remote_control.RobotName)
}

::google::protobuf::uint8* RobotName::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_remote_control.RobotName)
  // optional string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "robot_remote_control.RobotName.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:robot_remote_control.RobotName)
  return target;
}

int RobotName::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robot_remote_control.RobotName)
  int total_size = 0;

  // optional string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotName::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_remote_control.RobotName)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RobotName* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RobotName>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_remote_control.RobotName)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_remote_control.RobotName)
    MergeFrom(*source);
  }
}

void RobotName::MergeFrom(const RobotName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_remote_control.RobotName)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void RobotName::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_remote_control.RobotName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotName::CopyFrom(const RobotName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_remote_control.RobotName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotName::IsInitialized() const {

  return true;
}

void RobotName::Swap(RobotName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotName::InternalSwap(RobotName* other) {
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RobotName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotName_descriptor_;
  metadata.reflection = RobotName_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RobotName

// optional string value = 1;
void RobotName::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RobotName::value() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.RobotName.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RobotName::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robot_remote_control.RobotName.value)
}
 void RobotName::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robot_remote_control.RobotName.value)
}
 void RobotName::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robot_remote_control.RobotName.value)
}
 ::std::string* RobotName::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:robot_remote_control.RobotName.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RobotName::release_value() {
  // @@protoc_insertion_point(field_release:robot_remote_control.RobotName.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RobotName::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:robot_remote_control.RobotName.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotState::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotState::RobotState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_remote_control.RobotState)
}

void RobotState::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RobotState::RobotState(const RobotState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robot_remote_control.RobotState)
}

void RobotState::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RobotState::~RobotState() {
  // @@protoc_insertion_point(destructor:robot_remote_control.RobotState)
  SharedDtor();
}

void RobotState::SharedDtor() {
  state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RobotState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotState_descriptor_;
}

const RobotState& RobotState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotRemoteControl_2eproto();
  return *default_instance_;
}

RobotState* RobotState::default_instance_ = NULL;

RobotState* RobotState::New(::google::protobuf::Arena* arena) const {
  RobotState* n = new RobotState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RobotState::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_remote_control.RobotState)
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RobotState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_remote_control.RobotState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string state = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->state().data(), this->state().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "robot_remote_control.RobotState.state"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_remote_control.RobotState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_remote_control.RobotState)
  return false;
#undef DO_
}

void RobotState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_remote_control.RobotState)
  // optional string state = 1;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "robot_remote_control.RobotState.state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->state(), output);
  }

  // @@protoc_insertion_point(serialize_end:robot_remote_control.RobotState)
}

::google::protobuf::uint8* RobotState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_remote_control.RobotState)
  // optional string state = 1;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "robot_remote_control.RobotState.state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->state(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:robot_remote_control.RobotState)
  return target;
}

int RobotState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robot_remote_control.RobotState)
  int total_size = 0;

  // optional string state = 1;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->state());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_remote_control.RobotState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RobotState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RobotState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_remote_control.RobotState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_remote_control.RobotState)
    MergeFrom(*source);
  }
}

void RobotState::MergeFrom(const RobotState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_remote_control.RobotState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.state().size() > 0) {

    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
}

void RobotState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_remote_control.RobotState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotState::CopyFrom(const RobotState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_remote_control.RobotState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotState::IsInitialized() const {

  return true;
}

void RobotState::Swap(RobotState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotState::InternalSwap(RobotState* other) {
  state_.Swap(&other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RobotState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotState_descriptor_;
  metadata.reflection = RobotState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RobotState

// optional string state = 1;
void RobotState::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RobotState::state() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.RobotState.state)
  return state_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RobotState::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robot_remote_control.RobotState.state)
}
 void RobotState::set_state(const char* value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robot_remote_control.RobotState.state)
}
 void RobotState::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robot_remote_control.RobotState.state)
}
 ::std::string* RobotState::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:robot_remote_control.RobotState.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RobotState::release_state() {
  // @@protoc_insertion_point(field_release:robot_remote_control.RobotState.state)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RobotState::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:robot_remote_control.RobotState.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogMessage::kLevelFieldNumber;
const int LogMessage::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogMessage::LogMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_remote_control.LogMessage)
}

void LogMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LogMessage::LogMessage(const LogMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robot_remote_control.LogMessage)
}

void LogMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  level_ = 0u;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LogMessage::~LogMessage() {
  // @@protoc_insertion_point(destructor:robot_remote_control.LogMessage)
  SharedDtor();
}

void LogMessage::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LogMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogMessage_descriptor_;
}

const LogMessage& LogMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotRemoteControl_2eproto();
  return *default_instance_;
}

LogMessage* LogMessage::default_instance_ = NULL;

LogMessage* LogMessage::New(::google::protobuf::Arena* arena) const {
  LogMessage* n = new LogMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_remote_control.LogMessage)
  level_ = 0u;
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LogMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_remote_control.LogMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "robot_remote_control.LogMessage.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_remote_control.LogMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_remote_control.LogMessage)
  return false;
#undef DO_
}

void LogMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_remote_control.LogMessage)
  // optional uint32 level = 1;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "robot_remote_control.LogMessage.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:robot_remote_control.LogMessage)
}

::google::protobuf::uint8* LogMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_remote_control.LogMessage)
  // optional uint32 level = 1;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "robot_remote_control.LogMessage.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:robot_remote_control.LogMessage)
  return target;
}

int LogMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robot_remote_control.LogMessage)
  int total_size = 0;

  // optional uint32 level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_remote_control.LogMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_remote_control.LogMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_remote_control.LogMessage)
    MergeFrom(*source);
  }
}

void LogMessage::MergeFrom(const LogMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_remote_control.LogMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void LogMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_remote_control.LogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogMessage::CopyFrom(const LogMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_remote_control.LogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMessage::IsInitialized() const {

  return true;
}

void LogMessage::Swap(LogMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogMessage::InternalSwap(LogMessage* other) {
  std::swap(level_, other->level_);
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogMessage_descriptor_;
  metadata.reflection = LogMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogMessage

// optional uint32 level = 1;
void LogMessage::clear_level() {
  level_ = 0u;
}
 ::google::protobuf::uint32 LogMessage::level() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.LogMessage.level)
  return level_;
}
 void LogMessage::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:robot_remote_control.LogMessage.level)
}

// optional string message = 2;
void LogMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LogMessage::message() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.LogMessage.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogMessage::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robot_remote_control.LogMessage.message)
}
 void LogMessage::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robot_remote_control.LogMessage.message)
}
 void LogMessage::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robot_remote_control.LogMessage.message)
}
 ::std::string* LogMessage::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:robot_remote_control.LogMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LogMessage::release_message() {
  // @@protoc_insertion_point(field_release:robot_remote_control.LogMessage.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LogMessage::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:robot_remote_control.LogMessage.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoStream::kUrlFieldNumber;
const int VideoStream::kCameraposeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoStream::VideoStream()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_remote_control.VideoStream)
}

void VideoStream::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  camerapose_ = const_cast< ::robot_remote_control::Pose*>(&::robot_remote_control::Pose::default_instance());
}

VideoStream::VideoStream(const VideoStream& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robot_remote_control.VideoStream)
}

void VideoStream::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camerapose_ = NULL;
}

VideoStream::~VideoStream() {
  // @@protoc_insertion_point(destructor:robot_remote_control.VideoStream)
  SharedDtor();
}

void VideoStream::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete camerapose_;
  }
}

void VideoStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoStream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoStream_descriptor_;
}

const VideoStream& VideoStream::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotRemoteControl_2eproto();
  return *default_instance_;
}

VideoStream* VideoStream::default_instance_ = NULL;

VideoStream* VideoStream::New(::google::protobuf::Arena* arena) const {
  VideoStream* n = new VideoStream;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoStream::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_remote_control.VideoStream)
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && camerapose_ != NULL) delete camerapose_;
  camerapose_ = NULL;
}

bool VideoStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_remote_control.VideoStream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "robot_remote_control.VideoStream.url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_camerapose;
        break;
      }

      // optional .robot_remote_control.Pose camerapose = 2;
      case 2: {
        if (tag == 18) {
         parse_camerapose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camerapose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_remote_control.VideoStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_remote_control.VideoStream)
  return false;
#undef DO_
}

void VideoStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_remote_control.VideoStream)
  // optional string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "robot_remote_control.VideoStream.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional .robot_remote_control.Pose camerapose = 2;
  if (this->has_camerapose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->camerapose_, output);
  }

  // @@protoc_insertion_point(serialize_end:robot_remote_control.VideoStream)
}

::google::protobuf::uint8* VideoStream::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_remote_control.VideoStream)
  // optional string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "robot_remote_control.VideoStream.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional .robot_remote_control.Pose camerapose = 2;
  if (this->has_camerapose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->camerapose_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:robot_remote_control.VideoStream)
  return target;
}

int VideoStream::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robot_remote_control.VideoStream)
  int total_size = 0;

  // optional string url = 1;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  // optional .robot_remote_control.Pose camerapose = 2;
  if (this->has_camerapose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->camerapose_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoStream::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_remote_control.VideoStream)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VideoStream* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoStream>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_remote_control.VideoStream)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_remote_control.VideoStream)
    MergeFrom(*source);
  }
}

void VideoStream::MergeFrom(const VideoStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_remote_control.VideoStream)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_camerapose()) {
    mutable_camerapose()->::robot_remote_control::Pose::MergeFrom(from.camerapose());
  }
}

void VideoStream::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_remote_control.VideoStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoStream::CopyFrom(const VideoStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_remote_control.VideoStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoStream::IsInitialized() const {

  return true;
}

void VideoStream::Swap(VideoStream* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoStream::InternalSwap(VideoStream* other) {
  url_.Swap(&other->url_);
  std::swap(camerapose_, other->camerapose_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoStream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoStream_descriptor_;
  metadata.reflection = VideoStream_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoStream

// optional string url = 1;
void VideoStream::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VideoStream::url() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.VideoStream.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VideoStream::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robot_remote_control.VideoStream.url)
}
 void VideoStream::set_url(const char* value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robot_remote_control.VideoStream.url)
}
 void VideoStream::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robot_remote_control.VideoStream.url)
}
 ::std::string* VideoStream::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:robot_remote_control.VideoStream.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VideoStream::release_url() {
  // @@protoc_insertion_point(field_release:robot_remote_control.VideoStream.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VideoStream::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:robot_remote_control.VideoStream.url)
}

// optional .robot_remote_control.Pose camerapose = 2;
bool VideoStream::has_camerapose() const {
  return !_is_default_instance_ && camerapose_ != NULL;
}
void VideoStream::clear_camerapose() {
  if (GetArenaNoVirtual() == NULL && camerapose_ != NULL) delete camerapose_;
  camerapose_ = NULL;
}
const ::robot_remote_control::Pose& VideoStream::camerapose() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.VideoStream.camerapose)
  return camerapose_ != NULL ? *camerapose_ : *default_instance_->camerapose_;
}
::robot_remote_control::Pose* VideoStream::mutable_camerapose() {
  
  if (camerapose_ == NULL) {
    camerapose_ = new ::robot_remote_control::Pose;
  }
  // @@protoc_insertion_point(field_mutable:robot_remote_control.VideoStream.camerapose)
  return camerapose_;
}
::robot_remote_control::Pose* VideoStream::release_camerapose() {
  // @@protoc_insertion_point(field_release:robot_remote_control.VideoStream.camerapose)
  
  ::robot_remote_control::Pose* temp = camerapose_;
  camerapose_ = NULL;
  return temp;
}
void VideoStream::set_allocated_camerapose(::robot_remote_control::Pose* camerapose) {
  delete camerapose_;
  camerapose_ = camerapose;
  if (camerapose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:robot_remote_control.VideoStream.camerapose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoStreams::kStreamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoStreams::VideoStreams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_remote_control.VideoStreams)
}

void VideoStreams::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VideoStreams::VideoStreams(const VideoStreams& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robot_remote_control.VideoStreams)
}

void VideoStreams::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

VideoStreams::~VideoStreams() {
  // @@protoc_insertion_point(destructor:robot_remote_control.VideoStreams)
  SharedDtor();
}

void VideoStreams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VideoStreams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoStreams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoStreams_descriptor_;
}

const VideoStreams& VideoStreams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotRemoteControl_2eproto();
  return *default_instance_;
}

VideoStreams* VideoStreams::default_instance_ = NULL;

VideoStreams* VideoStreams::New(::google::protobuf::Arena* arena) const {
  VideoStreams* n = new VideoStreams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoStreams::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_remote_control.VideoStreams)
  stream_.Clear();
}

bool VideoStreams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_remote_control.VideoStreams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .robot_remote_control.VideoStream stream = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_stream:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stream()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_stream;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_remote_control.VideoStreams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_remote_control.VideoStreams)
  return false;
#undef DO_
}

void VideoStreams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_remote_control.VideoStreams)
  // repeated .robot_remote_control.VideoStream stream = 1;
  for (unsigned int i = 0, n = this->stream_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stream(i), output);
  }

  // @@protoc_insertion_point(serialize_end:robot_remote_control.VideoStreams)
}

::google::protobuf::uint8* VideoStreams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_remote_control.VideoStreams)
  // repeated .robot_remote_control.VideoStream stream = 1;
  for (unsigned int i = 0, n = this->stream_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->stream(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:robot_remote_control.VideoStreams)
  return target;
}

int VideoStreams::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robot_remote_control.VideoStreams)
  int total_size = 0;

  // repeated .robot_remote_control.VideoStream stream = 1;
  total_size += 1 * this->stream_size();
  for (int i = 0; i < this->stream_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stream(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoStreams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_remote_control.VideoStreams)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VideoStreams* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoStreams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_remote_control.VideoStreams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_remote_control.VideoStreams)
    MergeFrom(*source);
  }
}

void VideoStreams::MergeFrom(const VideoStreams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_remote_control.VideoStreams)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  stream_.MergeFrom(from.stream_);
}

void VideoStreams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_remote_control.VideoStreams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoStreams::CopyFrom(const VideoStreams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_remote_control.VideoStreams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoStreams::IsInitialized() const {

  return true;
}

void VideoStreams::Swap(VideoStreams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoStreams::InternalSwap(VideoStreams* other) {
  stream_.UnsafeArenaSwap(&other->stream_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoStreams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoStreams_descriptor_;
  metadata.reflection = VideoStreams_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoStreams

// repeated .robot_remote_control.VideoStream stream = 1;
int VideoStreams::stream_size() const {
  return stream_.size();
}
void VideoStreams::clear_stream() {
  stream_.Clear();
}
const ::robot_remote_control::VideoStream& VideoStreams::stream(int index) const {
  // @@protoc_insertion_point(field_get:robot_remote_control.VideoStreams.stream)
  return stream_.Get(index);
}
::robot_remote_control::VideoStream* VideoStreams::mutable_stream(int index) {
  // @@protoc_insertion_point(field_mutable:robot_remote_control.VideoStreams.stream)
  return stream_.Mutable(index);
}
::robot_remote_control::VideoStream* VideoStreams::add_stream() {
  // @@protoc_insertion_point(field_add:robot_remote_control.VideoStreams.stream)
  return stream_.Add();
}
::google::protobuf::RepeatedPtrField< ::robot_remote_control::VideoStream >*
VideoStreams::mutable_stream() {
  // @@protoc_insertion_point(field_mutable_list:robot_remote_control.VideoStreams.stream)
  return &stream_;
}
const ::google::protobuf::RepeatedPtrField< ::robot_remote_control::VideoStream >&
VideoStreams::stream() const {
  // @@protoc_insertion_point(field_list:robot_remote_control.VideoStreams.stream)
  return stream_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleSensor::kNameFieldNumber;
const int SimpleSensor::kIdFieldNumber;
const int SimpleSensor::kSizeFieldNumber;
const int SimpleSensor::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleSensor::SimpleSensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_remote_control.SimpleSensor)
}

void SimpleSensor::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  size_ = const_cast< ::robot_remote_control::Vector2*>(&::robot_remote_control::Vector2::default_instance());
}

SimpleSensor::SimpleSensor(const SimpleSensor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robot_remote_control.SimpleSensor)
}

void SimpleSensor::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
  size_ = NULL;
}

SimpleSensor::~SimpleSensor() {
  // @@protoc_insertion_point(destructor:robot_remote_control.SimpleSensor)
  SharedDtor();
}

void SimpleSensor::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete size_;
  }
}

void SimpleSensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleSensor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleSensor_descriptor_;
}

const SimpleSensor& SimpleSensor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotRemoteControl_2eproto();
  return *default_instance_;
}

SimpleSensor* SimpleSensor::default_instance_ = NULL;

SimpleSensor* SimpleSensor::New(::google::protobuf::Arena* arena) const {
  SimpleSensor* n = new SimpleSensor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimpleSensor::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_remote_control.SimpleSensor)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
  if (GetArenaNoVirtual() == NULL && size_ != NULL) delete size_;
  size_ = NULL;
  value_.Clear();
}

bool SimpleSensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_remote_control.SimpleSensor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "robot_remote_control.SimpleSensor.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_size;
        break;
      }

      // optional .robot_remote_control.Vector2 size = 3;
      case 3: {
        if (tag == 26) {
         parse_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // repeated float value = 4;
      case 4: {
        if (tag == 34) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_value())));
        } else if (tag == 37) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34, input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_remote_control.SimpleSensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_remote_control.SimpleSensor)
  return false;
#undef DO_
}

void SimpleSensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_remote_control.SimpleSensor)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "robot_remote_control.SimpleSensor.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional .robot_remote_control.Vector2 size = 3;
  if (this->has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->size_, output);
  }

  // repeated float value = 4;
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->value(i), output);
  }

  // @@protoc_insertion_point(serialize_end:robot_remote_control.SimpleSensor)
}

::google::protobuf::uint8* SimpleSensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_remote_control.SimpleSensor)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "robot_remote_control.SimpleSensor.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional .robot_remote_control.Vector2 size = 3;
  if (this->has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->size_, false, target);
  }

  // repeated float value = 4;
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->value(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:robot_remote_control.SimpleSensor)
  return target;
}

int SimpleSensor::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robot_remote_control.SimpleSensor)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional .robot_remote_control.Vector2 size = 3;
  if (this->has_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->size_);
  }

  // repeated float value = 4;
  {
    int data_size = 0;
    data_size = 4 * this->value_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleSensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_remote_control.SimpleSensor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SimpleSensor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleSensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_remote_control.SimpleSensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_remote_control.SimpleSensor)
    MergeFrom(*source);
  }
}

void SimpleSensor::MergeFrom(const SimpleSensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_remote_control.SimpleSensor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  value_.MergeFrom(from.value_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_size()) {
    mutable_size()->::robot_remote_control::Vector2::MergeFrom(from.size());
  }
}

void SimpleSensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_remote_control.SimpleSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleSensor::CopyFrom(const SimpleSensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_remote_control.SimpleSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleSensor::IsInitialized() const {

  return true;
}

void SimpleSensor::Swap(SimpleSensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleSensor::InternalSwap(SimpleSensor* other) {
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  std::swap(size_, other->size_);
  value_.UnsafeArenaSwap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimpleSensor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleSensor_descriptor_;
  metadata.reflection = SimpleSensor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleSensor

// optional string name = 1;
void SimpleSensor::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SimpleSensor::name() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.SimpleSensor.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SimpleSensor::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robot_remote_control.SimpleSensor.name)
}
 void SimpleSensor::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robot_remote_control.SimpleSensor.name)
}
 void SimpleSensor::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robot_remote_control.SimpleSensor.name)
}
 ::std::string* SimpleSensor::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:robot_remote_control.SimpleSensor.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SimpleSensor::release_name() {
  // @@protoc_insertion_point(field_release:robot_remote_control.SimpleSensor.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SimpleSensor::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:robot_remote_control.SimpleSensor.name)
}

// optional uint32 id = 2;
void SimpleSensor::clear_id() {
  id_ = 0u;
}
 ::google::protobuf::uint32 SimpleSensor::id() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.SimpleSensor.id)
  return id_;
}
 void SimpleSensor::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:robot_remote_control.SimpleSensor.id)
}

// optional .robot_remote_control.Vector2 size = 3;
bool SimpleSensor::has_size() const {
  return !_is_default_instance_ && size_ != NULL;
}
void SimpleSensor::clear_size() {
  if (GetArenaNoVirtual() == NULL && size_ != NULL) delete size_;
  size_ = NULL;
}
const ::robot_remote_control::Vector2& SimpleSensor::size() const {
  // @@protoc_insertion_point(field_get:robot_remote_control.SimpleSensor.size)
  return size_ != NULL ? *size_ : *default_instance_->size_;
}
::robot_remote_control::Vector2* SimpleSensor::mutable_size() {
  
  if (size_ == NULL) {
    size_ = new ::robot_remote_control::Vector2;
  }
  // @@protoc_insertion_point(field_mutable:robot_remote_control.SimpleSensor.size)
  return size_;
}
::robot_remote_control::Vector2* SimpleSensor::release_size() {
  // @@protoc_insertion_point(field_release:robot_remote_control.SimpleSensor.size)
  
  ::robot_remote_control::Vector2* temp = size_;
  size_ = NULL;
  return temp;
}
void SimpleSensor::set_allocated_size(::robot_remote_control::Vector2* size) {
  delete size_;
  size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:robot_remote_control.SimpleSensor.size)
}

// repeated float value = 4;
int SimpleSensor::value_size() const {
  return value_.size();
}
void SimpleSensor::clear_value() {
  value_.Clear();
}
 float SimpleSensor::value(int index) const {
  // @@protoc_insertion_point(field_get:robot_remote_control.SimpleSensor.value)
  return value_.Get(index);
}
 void SimpleSensor::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:robot_remote_control.SimpleSensor.value)
}
 void SimpleSensor::add_value(float value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:robot_remote_control.SimpleSensor.value)
}
 const ::google::protobuf::RepeatedField< float >&
SimpleSensor::value() const {
  // @@protoc_insertion_point(field_list:robot_remote_control.SimpleSensor.value)
  return value_;
}
 ::google::protobuf::RepeatedField< float >*
SimpleSensor::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:robot_remote_control.SimpleSensor.value)
  return &value_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleSensors::kSensorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleSensors::SimpleSensors()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_remote_control.SimpleSensors)
}

void SimpleSensors::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SimpleSensors::SimpleSensors(const SimpleSensors& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robot_remote_control.SimpleSensors)
}

void SimpleSensors::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SimpleSensors::~SimpleSensors() {
  // @@protoc_insertion_point(destructor:robot_remote_control.SimpleSensors)
  SharedDtor();
}

void SimpleSensors::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimpleSensors::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleSensors::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleSensors_descriptor_;
}

const SimpleSensors& SimpleSensors::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotRemoteControl_2eproto();
  return *default_instance_;
}

SimpleSensors* SimpleSensors::default_instance_ = NULL;

SimpleSensors* SimpleSensors::New(::google::protobuf::Arena* arena) const {
  SimpleSensors* n = new SimpleSensors;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimpleSensors::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_remote_control.SimpleSensors)
  sensors_.Clear();
}

bool SimpleSensors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_remote_control.SimpleSensors)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .robot_remote_control.SimpleSensor sensors = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_sensors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sensors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_sensors;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_remote_control.SimpleSensors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_remote_control.SimpleSensors)
  return false;
#undef DO_
}

void SimpleSensors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_remote_control.SimpleSensors)
  // repeated .robot_remote_control.SimpleSensor sensors = 1;
  for (unsigned int i = 0, n = this->sensors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sensors(i), output);
  }

  // @@protoc_insertion_point(serialize_end:robot_remote_control.SimpleSensors)
}

::google::protobuf::uint8* SimpleSensors::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_remote_control.SimpleSensors)
  // repeated .robot_remote_control.SimpleSensor sensors = 1;
  for (unsigned int i = 0, n = this->sensors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sensors(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:robot_remote_control.SimpleSensors)
  return target;
}

int SimpleSensors::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robot_remote_control.SimpleSensors)
  int total_size = 0;

  // repeated .robot_remote_control.SimpleSensor sensors = 1;
  total_size += 1 * this->sensors_size();
  for (int i = 0; i < this->sensors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sensors(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleSensors::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_remote_control.SimpleSensors)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SimpleSensors* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleSensors>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_remote_control.SimpleSensors)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_remote_control.SimpleSensors)
    MergeFrom(*source);
  }
}

void SimpleSensors::MergeFrom(const SimpleSensors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_remote_control.SimpleSensors)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  sensors_.MergeFrom(from.sensors_);
}

void SimpleSensors::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_remote_control.SimpleSensors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleSensors::CopyFrom(const SimpleSensors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_remote_control.SimpleSensors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleSensors::IsInitialized() const {

  return true;
}

void SimpleSensors::Swap(SimpleSensors* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleSensors::InternalSwap(SimpleSensors* other) {
  sensors_.UnsafeArenaSwap(&other->sensors_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimpleSensors::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleSensors_descriptor_;
  metadata.reflection = SimpleSensors_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleSensors

// repeated .robot_remote_control.SimpleSensor sensors = 1;
int SimpleSensors::sensors_size() const {
  return sensors_.size();
}
void SimpleSensors::clear_sensors() {
  sensors_.Clear();
}
const ::robot_remote_control::SimpleSensor& SimpleSensors::sensors(int index) const {
  // @@protoc_insertion_point(field_get:robot_remote_control.SimpleSensors.sensors)
  return sensors_.Get(index);
}
::robot_remote_control::SimpleSensor* SimpleSensors::mutable_sensors(int index) {
  // @@protoc_insertion_point(field_mutable:robot_remote_control.SimpleSensors.sensors)
  return sensors_.Mutable(index);
}
::robot_remote_control::SimpleSensor* SimpleSensors::add_sensors() {
  // @@protoc_insertion_point(field_add:robot_remote_control.SimpleSensors.sensors)
  return sensors_.Add();
}
::google::protobuf::RepeatedPtrField< ::robot_remote_control::SimpleSensor >*
SimpleSensors::mutable_sensors() {
  // @@protoc_insertion_point(field_mutable_list:robot_remote_control.SimpleSensors.sensors)
  return &sensors_;
}
const ::google::protobuf::RepeatedPtrField< ::robot_remote_control::SimpleSensor >&
SimpleSensors::sensors() const {
  // @@protoc_insertion_point(field_list:robot_remote_control.SimpleSensors.sensors)
  return sensors_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace robot_remote_control

// @@protoc_insertion_point(global_scope)
